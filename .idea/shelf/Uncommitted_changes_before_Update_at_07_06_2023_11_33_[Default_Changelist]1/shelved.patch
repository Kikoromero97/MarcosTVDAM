Index: src/menuPrincipal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\npublic class menuPrincipal {\r\n    private JPanel JpanelPrincipalOpciones;\r\n    private JLabel logoMarcosTV;\r\n    private JButton areaDepartamentoButton;\r\n    private JButton areaUsuarioButton;\r\n    private JButton areaContenidoButton;\r\n    private JButton salirButton;\r\n    private JPanel JpanelLogo;\r\n    private JPanel JPanelBotonesPrincipales;\r\n    private JPanel JPanelBotonSalir;\r\n    private JButton areaDirectoresButton;\r\n\r\n    //MAIN CREADO SIMPLEMENTE PARA PODER EJECUTAR PANTALLA Y VER QUE FUNCIONA; CAMBIAR A QUIEN CORRESPONDA POR FUNCIÓN\r\n    public static void main(String[] args) {\r\n        JFrame frame = new JFrame(\"menuPrincipal\");\r\n        frame.setContentPane(new menuPrincipal().JpanelPrincipalOpciones);\r\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        frame.pack();\r\n        frame.setVisible(true);\r\n    }\r\n\r\n    public menuPrincipal() {\r\n    areaContenidoButton.addActionListener(new ActionListener() {\r\n        @Override\r\n        public void actionPerformed(ActionEvent e) {\r\n            PanelPrincipalContenido.mostrarpanelPrincipalContenido();\r\n        }\r\n    });\r\n\r\n\r\n}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/menuPrincipal.java b/src/menuPrincipal.java
--- a/src/menuPrincipal.java	
+++ b/src/menuPrincipal.java	
@@ -15,12 +15,19 @@
     private JButton areaDirectoresButton;
 
     //MAIN CREADO SIMPLEMENTE PARA PODER EJECUTAR PANTALLA Y VER QUE FUNCIONA; CAMBIAR A QUIEN CORRESPONDA POR FUNCIÓN
-    public static void main(String[] args) {
-        JFrame frame = new JFrame("menuPrincipal");
-        frame.setContentPane(new menuPrincipal().JpanelPrincipalOpciones);
-        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-        frame.pack();
-        frame.setVisible(true);
+
+
+    public static void main(String[] args){
+        if(DBManager.loadDriver() && DBManager.connect()){
+            JFrame frame = new JFrame("menuPrincipal");
+            frame.setContentPane(new menuPrincipal().JpanelPrincipalOpciones);
+            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+            frame.pack();
+            frame.setVisible(true);
+        }else{
+            System.out.println("No funciona nada");
+        }
+
     }
 
     public menuPrincipal() {
Index: src/PanelPrincipalContenido.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\npublic class PanelPrincipalContenido {\r\n    public JPanel JPanelVerPeliculas;\r\n    private JPanel JPanelPrincipal;\r\n    private JPanel JPanelBotones;\r\n    private JButton paisButton;\r\n    private JButton idiomaButton;\r\n    private JButton peliculaButton;\r\n    private JButton categoriaButton;\r\n    private JButton serieButton;\r\n    private JButton documentalButton;\r\n    private JButton salirButton;\r\n    private JLabel logoMarcosTV;\r\n\r\n    public static void mostrarpanelPrincipalContenido(){\r\n        JFrame frame = new JFrame(\"PanelPrincipalContenido\");\r\n        frame.setContentPane(new PanelPrincipalContenido().JPanelPrincipal);\r\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        frame.setSize(700,500);\r\n        frame.setVisible(true);\r\n    }\r\n\r\n    public PanelPrincipalContenido() {\r\n\r\n    peliculaButton.addActionListener(new ActionListener() {\r\n        @Override\r\n        public void actionPerformed(ActionEvent e) {\r\n            verPeliculas.mostrarPatallaVerPelicula();\r\n        }\r\n    });\r\n\r\n    documentalButton.addActionListener(new ActionListener() {\r\n        @Override\r\n        public void actionPerformed(ActionEvent e) {\r\n            verDocumental.mostrarPantallaVerDocumental();\r\n        }\r\n    });\r\n\r\n\r\n    serieButton.addActionListener(new ActionListener() {\r\n        @Override\r\n        public void actionPerformed(ActionEvent e) {\r\n            verSeries.mostrarPantallaVerSeries();\r\n        }\r\n    });\r\n\r\n\r\n    categoriaButton.addActionListener(new ActionListener() {\r\n        @Override\r\n        public void actionPerformed(ActionEvent e) {\r\n           // VerCategoria.mostarPanelVerCategoria();\r\n        }\r\n    });\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/PanelPrincipalContenido.java b/src/PanelPrincipalContenido.java
--- a/src/PanelPrincipalContenido.java	
+++ b/src/PanelPrincipalContenido.java	
@@ -55,6 +55,5 @@
            // VerCategoria.mostarPanelVerCategoria();
         }
     });
-
     }
 }
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/datatypes/BasicDataTypes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/datatypes/BasicDataTypes.java b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/datatypes/BasicDataTypes.java
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/datatypes/BasicDataTypes.java	
@@ -0,0 +1,126 @@
+/*=====================================================================
+File: 	 BasicDataTypes.java
+Summary: This Microsoft JDBC Driver for SQL Server sample application
+         demonstrates how to use result set getter methods to retrieve
+         basic SQL Server data type values, and how to use result set
+         update methods to update those values.
+---------------------------------------------------------------------
+This file is part of the Microsoft JDBC Driver for SQL Server Code Samples.
+Copyright (C) Microsoft Corporation.  All rights reserved.
+ 
+This source code is intended only as a supplement to Microsoft
+Development Tools and/or on-line documentation.  See these other
+materials for detailed information regarding Microsoft code samples.
+ 
+THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF
+ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
+PARTICULAR PURPOSE.
+=====================================================================*/
+import java.sql.Connection;
+import java.sql.Date;
+import java.sql.DriverManager;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.sql.Time;
+import java.sql.Timestamp;
+
+import com.microsoft.sqlserver.jdbc.SQLServerResultSet;
+
+import microsoft.sql.DateTimeOffset;
+
+public class BasicDataTypes {
+    private static final String tableName = "DataTypesTable";
+
+	public static void main(String[] args) {
+
+        // Create a variable for the connection string.
+        String connectionUrl = "jdbc:sqlserver://<server>:<port>;databaseName=<database>;user=<user>;password=<password>";
+
+        try (Connection con = DriverManager.getConnection(connectionUrl);
+                Statement stmt = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);) {
+
+        	dropAndCreateTable(stmt);
+        	insertOriginalData(con);
+        	
+            String SQL = "SELECT * FROM " + tableName;
+            ResultSet rs = stmt.executeQuery(SQL);
+            rs.next();
+            displayRow("ORIGINAL DATA", rs);
+
+            // Update the data in the result set.
+            rs.updateString(2, "B");
+            rs.updateString(3, "Some updated text.");
+            rs.updateBoolean(4, true);
+            rs.updateDouble(5, 77.89);
+            rs.updateDouble(6, 1000.01);
+            long timeInMillis = System.currentTimeMillis();
+            Timestamp ts = new Timestamp(timeInMillis);
+            rs.updateTimestamp(7, ts);
+            rs.updateDate(8, new Date(timeInMillis));
+            rs.updateTime(9, new Time(timeInMillis));
+            rs.updateTimestamp(10, ts);
+
+            // -480 indicates GMT - 8:00 hrs
+            ((SQLServerResultSet) rs).updateDateTimeOffset(11, DateTimeOffset.valueOf(ts, -480));
+
+            rs.updateRow();
+
+            // Get the updated data from the database and display it.
+            rs = stmt.executeQuery(SQL);
+            rs.next();
+            displayRow("UPDATED DATA", rs);
+        }
+        // Handle any errors that may have occurred.
+        catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private static void displayRow(String title,
+            ResultSet rs) throws SQLException {
+        System.out.println(title);
+        System.out.println(rs.getInt(1) + " , " +                 // SQL integer type.
+                rs.getString(2) + " , " +                         // SQL char type.
+                rs.getString(3) + " , " +                         // SQL varchar type.
+                rs.getBoolean(4) + " , " +                        // SQL bit type.
+                rs.getDouble(5) + " , " +                         // SQL decimal type.
+                rs.getDouble(6) + " , " +                         // SQL money type.
+                rs.getTimestamp(7) + " , " +                      // SQL datetime type.
+                rs.getDate(8) + " , " +                           // SQL date type.
+                rs.getTime(9) + " , " +                           // SQL time type.
+                rs.getTimestamp(10) + " , " +                     // SQL datetime2 type.
+                ((SQLServerResultSet) rs).getDateTimeOffset(11)); // SQL datetimeoffset type.
+        System.out.println();
+    }
+
+    private static void dropAndCreateTable(Statement stmt) throws SQLException {
+        stmt.executeUpdate("if object_id('" + tableName + "','U') is not null" + " drop table " + tableName);
+
+        String sql = "create table " + tableName + " (" + "c1 int, " + "c2 char(20), " + "c3 varchar(20), " + "c4 bit, "
+                + "c5 decimal(10,5), " + "c6 money, " + "c7 datetime, " + "c8 date, " + "c9 time(7), "
+                + "c10 datetime2(7), " + "c11 datetimeoffset(7), " + ");";
+
+        stmt.execute(sql);
+    }
+
+    private static void insertOriginalData(Connection con) throws SQLException {
+        String sql = "insert into " + tableName + " values( " + "?,?,?,?,?,?,?,?,?,?,?" + ")";
+        try (PreparedStatement pstmt = con.prepareStatement(sql)) {
+            pstmt.setObject(1, 100);
+            pstmt.setObject(2, "original text");
+            pstmt.setObject(3, "original text");
+            pstmt.setObject(4, false);
+            pstmt.setObject(5, 12.34);
+            pstmt.setObject(6, 56.78);
+            pstmt.setObject(7, new java.util.Date(1453500034839L));
+            pstmt.setObject(8, new java.util.Date(1453500034839L));
+            pstmt.setObject(9, new java.util.Date(1453500034839L));
+            pstmt.setObject(10, new java.util.Date(1453500034839L));
+            pstmt.setObject(11, new java.util.Date(1453500034839L));
+            pstmt.execute();
+        }
+    }
+}
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/adaptive/updateLargeData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/adaptive/updateLargeData.java b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/adaptive/updateLargeData.java
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/adaptive/updateLargeData.java	
@@ -0,0 +1,106 @@
+/*=====================================================================
+File: 	 UpdateLargeData.java
+Summary: This Microsoft JDBC Driver for SQL Server sample application
+         demonstrates how to update the large data in a database. 
+         It also demonstrates how to set the adaptive buffering mode 
+         explicitly for updatable result sets.
+---------------------------------------------------------------------
+This file is part of the Microsoft JDBC Driver for SQL Server Code Samples.
+Copyright (C) Microsoft Corporation.  All rights reserved.
+ 
+This source code is intended only as a supplement to Microsoft
+Development Tools and/or on-line documentation.  See these other
+materials for detailed information regarding Microsoft code samples.
+ 
+THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF
+ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
+PARTICULAR PURPOSE.
+=====================================================================*/
+import java.io.Reader;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import com.microsoft.sqlserver.jdbc.SQLServerStatement;
+
+
+public class UpdateLargeData {
+
+    public static void main(String[] args) {
+
+    	// Create a variable for the connection string.
+        String connectionUrl = "jdbc:sqlserver://<server>:<port>;databaseName=AdventureWorks;user=<user>;password=<password>";
+
+        // Establish the connection.
+        try (Connection con = DriverManager.getConnection(connectionUrl); Statement stmt = con.createStatement();
+                Statement stmt1 = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);) {
+
+            createTable(stmt);
+
+            // Since the summaries could be large, we should make sure that
+            // the driver reads them incrementally from a database,
+            // even though a server cursor is used for the updatable result sets.
+
+            // The recommended way to access the Microsoft JDBC Driver for SQL Server
+            // specific methods is to use the JDBC 4.0 Wrapper functionality.
+            // The following code statement demonstrates how to use the
+            // Statement.isWrapperFor and Statement.unwrap methods
+            // to access the driver specific response buffering methods.
+
+            if (stmt.isWrapperFor(com.microsoft.sqlserver.jdbc.SQLServerStatement.class)) {
+                SQLServerStatement SQLstmt = stmt.unwrap(com.microsoft.sqlserver.jdbc.SQLServerStatement.class);
+
+                SQLstmt.setResponseBuffering("adaptive");
+                System.out.println("Response buffering mode has been set to " + SQLstmt.getResponseBuffering());
+            }
+
+            // Select all of the document summaries.
+            try (ResultSet rs = stmt1.executeQuery("SELECT Title, DocumentSummary FROM Document_JDBC_Sample")) {
+
+                // Update each document summary.
+                while (rs.next()) {
+
+                    // Retrieve the original document summary.
+                    try (Reader reader = rs.getCharacterStream("DocumentSummary")) {
+
+                        if (reader == null) {
+                            // Update the document summary.
+                            System.out.println("Updating " + rs.getString("Title"));
+                            rs.updateString("DocumentSummary", "Work in progress");
+                            rs.updateRow();
+                        }
+                    }
+                }
+            }
+        }
+        // Handle any errors that may have occurred.
+        catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    private static void createTable(Statement stmt) throws SQLException {
+        stmt.execute("if exists (select * from sys.objects where name = 'Document_JDBC_Sample')"
+                + "drop table Document_JDBC_Sample");
+
+        String sql = "CREATE TABLE Document_JDBC_Sample (" + "[DocumentID] [int] NOT NULL identity,"
+                + "[Title] [char](50) NOT NULL," + "[DocumentSummary] [varchar](max) NULL)";
+
+        stmt.execute(sql);
+
+        sql = "INSERT Document_JDBC_Sample VALUES ('title1','summary1') ";
+        stmt.execute(sql);
+
+        sql = "INSERT Document_JDBC_Sample (title) VALUES ('title2') ";
+        stmt.execute(sql);
+
+        sql = "INSERT Document_JDBC_Sample (title) VALUES ('title3') ";
+        stmt.execute(sql);
+
+        sql = "INSERT Document_JDBC_Sample VALUES ('title4','summary3') ";
+        stmt.execute(sql);
+    }
+}
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/adaptive/readLargeData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/adaptive/readLargeData.java b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/adaptive/readLargeData.java
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/adaptive/readLargeData.java	
@@ -0,0 +1,85 @@
+/*=====================================================================
+File: 	 ReadLargeData.java
+Summary: This Microsoft JDBC Driver for SQL Server sample application
+         demonstrates how to read the large data from a database and 
+         how to get the adaptive buffering mode. It also demonstrates
+         how to retrieve a large single-column value from a SQL Server 
+         database by using the getCharacterStream method.
+---------------------------------------------------------------------
+This file is part of the Microsoft JDBC Driver for SQL Server Code Samples.
+Copyright (C) Microsoft Corporation.  All rights reserved.
+ 
+This source code is intended only as a supplement to Microsoft
+Development Tools and/or on-line documentation.  See these other
+materials for detailed information regarding Microsoft code samples.
+ 
+THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF
+ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
+PARTICULAR PURPOSE.
+=====================================================================*/
+import java.io.IOException;
+import java.io.Reader;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import com.microsoft.sqlserver.jdbc.SQLServerStatement;
+
+public class ReadLargeData {
+
+    public static void main(String[] args) {
+        // Create a variable for the connection string.
+        String connectionUrl = "jdbc:sqlserver://<server>:<port>;databaseName=AdventureWorks;user=<user>;password=<password>";
+        
+        // Create test data as an example.
+        StringBuffer buffer = new StringBuffer(4000);
+        for (int i = 0; i < 4000; i++)
+            buffer.append((char) ('A'));
+        
+        try (Connection con = DriverManager.getConnection(connectionUrl);
+                Statement stmt = con.createStatement();
+                PreparedStatement pstmt = con.prepareStatement("UPDATE Production.Document SET DocumentSummary = ? WHERE (DocumentID = 1)");) {
+
+            pstmt.setString(1, buffer.toString());
+            pstmt.executeUpdate();
+
+            // In adaptive mode, the application does not have to use a server cursor
+            // to avoid OutOfMemoryError when the SELECT statement produces very large
+            // results.
+
+            // Create and execute an SQL statement that returns some data.
+            String SQL = "SELECT Title, DocumentSummary FROM Production.Document";
+
+            // Display the response buffering mode.
+            SQLServerStatement SQLstmt = (SQLServerStatement) stmt;
+            System.out.println("Response buffering mode is: " + SQLstmt.getResponseBuffering());
+            SQLstmt.close();
+
+            // Get the updated data from the database and display it.
+            ResultSet rs = stmt.executeQuery(SQL);
+
+            while (rs.next()) {
+                Reader reader = rs.getCharacterStream(2);
+                if (reader != null) {
+                    char output[] = new char[40];
+                    while (reader.read(output) != -1) {
+                        // Do something with the chunk of the data that was
+                        // read.
+                    }
+
+                    System.out.println(rs.getString(1) + " has been accessed for the summary column.");
+                    // Close the stream.
+                    reader.close();
+                }
+            }
+        }
+        // Handle any errors that may have occurred.
+        catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+}
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/adaptive/ExecuteStoredProcedures.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/adaptive/ExecuteStoredProcedures.java b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/adaptive/ExecuteStoredProcedures.java
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/adaptive/ExecuteStoredProcedures.java	
@@ -0,0 +1,132 @@
+/*=====================================================================
+File: 	 ExecuteStoredProcedures.java
+Summary: This Microsoft JDBC Driver for SQL Server sample application
+         demonstrates how to retrieve a large OUT parameter from 
+         a stored procedure and how to get the adaptive buffering mode.
+---------------------------------------------------------------------
+This file is part of the Microsoft JDBC Driver for SQL Server Code Samples.
+Copyright (C) Microsoft Corporation.  All rights reserved.
+ 
+This source code is intended only as a supplement to Microsoft
+Development Tools and/or on-line documentation.  See these other
+materials for detailed information regarding Microsoft code samples.
+ 
+THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF
+ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
+PARTICULAR PURPOSE.
+=====================================================================*/
+import java.io.Reader;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import com.microsoft.sqlserver.jdbc.SQLServerCallableStatement;
+
+
+public class ExecuteStoredProcedures {
+
+    public static void main(String[] args) {
+
+        String connectionUrl = "jdbc:sqlserver://<server>:<port>;databaseName=AdventureWorks;user=<user>;password=<password>";
+
+		try (Connection con = DriverManager.getConnection(connectionUrl); Statement stmt = con.createStatement()) {
+
+			createTable(stmt);
+			createStoredProcedure(stmt);
+
+			// Create test data as an example.
+			StringBuffer buffer = new StringBuffer(4000);
+			for (int i = 0; i < 4000; i++)
+				buffer.append((char) ('A'));
+
+			try (PreparedStatement pstmt = con.prepareStatement(
+					"UPDATE Document_JDBC_Sample " + "SET DocumentSummary = ? WHERE (DocumentID = 1)")) {
+
+				pstmt.setString(1, buffer.toString());
+				pstmt.executeUpdate();
+			}
+
+			// Query test data by using a stored procedure.
+			try (SQLServerCallableStatement cstmt = (SQLServerCallableStatement) con
+					.prepareCall("{call GetLargeDataValue(?, ?, ?, ?)}")) {
+
+				cstmt.setInt(1, 1);
+				cstmt.registerOutParameter(2, java.sql.Types.INTEGER);
+				cstmt.registerOutParameter(3, java.sql.Types.CHAR);
+				cstmt.registerOutParameter(4, java.sql.Types.LONGVARCHAR);
+
+				// Display the response buffering mode.
+				System.out.println("Response buffering mode is: " + cstmt.getResponseBuffering());
+
+				cstmt.execute();
+				System.out.println("DocumentID: " + cstmt.getInt(2));
+				System.out.println("Document_Title: " + cstmt.getString(3));
+
+				try (Reader reader = cstmt.getCharacterStream(4)) {
+
+					// If your application needs to re-read any portion of the value,
+					// it must call the mark method on the InputStream or Reader to
+					// start buffering data that is to be re-read after a subsequent
+					// call to the reset method.
+					reader.mark(4000);
+
+					// Read the first half of data.
+					char output1[] = new char[2000];
+					reader.read(output1);
+					String stringOutput1 = new String(output1);
+
+					// Reset the stream.
+					reader.reset();
+
+					// Read all the data.
+					char output2[] = new char[4000];
+					reader.read(output2);
+					String stringOutput2 = new String(output2);
+
+					System.out.println("Document_Summary in half: " + stringOutput1);
+					System.out.println("Document_Summary: " + stringOutput2);
+				}
+			}
+		}
+        // Handle any errors that may have occurred.
+        catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    private static void createStoredProcedure(Statement stmt) throws SQLException {
+        String outputProcedure = "GetLargeDataValue";
+
+        String sql = " IF EXISTS (select * from sysobjects where id = object_id(N'" + outputProcedure
+                + "') and OBJECTPROPERTY(id, N'IsProcedure') = 1)" + " DROP PROCEDURE " + outputProcedure;
+        stmt.execute(sql);
+
+        sql = "CREATE PROCEDURE " + outputProcedure + " @p0 int, @p1 int OUTPUT, @p2 char(50) OUTPUT, "
+                + "@p3 varchar(max) OUTPUT " + " AS" + " SELECT top 1 @p1=DocumentID, @p2=Title,"
+                + " @p3=DocumentSummary FROM Document_JDBC_Sample where DocumentID = @p0";
+
+        stmt.execute(sql);
+    }
+
+    private static void createTable(Statement stmt) throws SQLException {
+        stmt.execute("if exists (select * from sys.objects where name = 'Document_JDBC_Sample')"
+                + "drop table Document_JDBC_Sample");
+
+        String sql = "CREATE TABLE Document_JDBC_Sample(" + "[DocumentID] [int] NOT NULL identity,"
+                + "[Title] [char](50) NOT NULL," + "[DocumentSummary] [varchar](max) NULL)";
+
+        stmt.execute(sql);
+
+        sql = "INSERT Document_JDBC_Sample VALUES ('title1','summary1') ";
+        stmt.execute(sql);
+
+        sql = "INSERT Document_JDBC_Sample VALUES ('title2','summary2') ";
+        stmt.execute(sql);
+
+        sql = "INSERT Document_JDBC_Sample VALUES ('title3','summary3') ";
+        stmt.execute(sql);
+    }
+}
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/sparse/SparseColumns.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/sparse/SparseColumns.java b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/sparse/SparseColumns.java
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/sparse/SparseColumns.java	
@@ -0,0 +1,131 @@
+/*=====================================================================
+File: 	 SparseColumns.java
+Summary: This Microsoft JDBC Driver for SQL Server sample application
+         demonstrates how to detect column sets. It also shows a 
+	     technique for parsing a column set's XML output, to get the 
+	     data from the sparse columns.
+---------------------------------------------------------------------
+This file is part of the Microsoft JDBC Driver for SQL Server Code Samples.
+Copyright (C) Microsoft Corporation.  All rights reserved.
+ 
+This source code is intended only as a supplement to Microsoft
+Development Tools and/or on-line documentation.  See these other
+materials for detailed information regarding Microsoft code samples.
+ 
+THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF
+ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
+PARTICULAR PURPOSE.
+=====================================================================*/
+import java.io.StringReader;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.ResultSet;
+import java.sql.ResultSetMetaData;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+import org.xml.sax.InputSource;
+
+
+public class SparseColumns {
+
+    public static void main(String args[]) {
+
+        // Create a variable for the connection string.
+        String connectionUrl = "jdbc:sqlserver://<server>:<port>;databaseName=AdventureWorks;user=<user>;password=<password>";
+
+        try (Connection con = DriverManager.getConnection(connectionUrl); Statement stmt = con.createStatement()) {
+
+            createColdCallingTable(stmt);
+
+            // Determine the column set column
+            String columnSetColName = null;
+            String strCmd = "SELECT name FROM sys.columns WHERE object_id=(SELECT OBJECT_ID('ColdCalling')) AND is_column_set = 1";
+
+            try (ResultSet rs = stmt.executeQuery(strCmd)) {
+                if (rs.next()) {
+                    columnSetColName = rs.getString(1);
+                    System.out.println(columnSetColName + " is the column set column!");
+                }
+            }
+
+            strCmd = "SELECT * FROM ColdCalling";
+            try (ResultSet rs = stmt.executeQuery(strCmd)) {
+
+                // Iterate through the result set
+                ResultSetMetaData rsmd = rs.getMetaData();
+
+                DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
+                DocumentBuilder db = dbf.newDocumentBuilder();
+                InputSource is = new InputSource();
+                while (rs.next()) {
+                    // Iterate through the columns
+                    for (int i = 1; i <= rsmd.getColumnCount(); ++i) {
+                        String name = rsmd.getColumnName(i);
+                        String value = rs.getString(i);
+
+                        // If this is the column set column
+                        if (name.equalsIgnoreCase(columnSetColName)) {
+                            System.out.println(name);
+
+                            // Instead of printing the raw XML, parse it
+                            if (value != null) {
+                                // Add artificial root node "sparse" to ensure XML is well formed
+                                String xml = "<sparse>" + value + "</sparse>";
+
+                                is.setCharacterStream(new StringReader(xml));
+                                Document doc = db.parse(is);
+
+                                // Extract the NodeList from the artificial root node that was added
+                                NodeList list = doc.getChildNodes();
+                                Node root = list.item(0); // This is the <sparse> node
+                                NodeList sparseColumnList = root.getChildNodes(); // These are the xml column nodes
+
+                                // Iterate through the XML document
+                                for (int n = 0; n < sparseColumnList.getLength(); ++n) {
+                                    Node sparseColumnNode = sparseColumnList.item(n);
+                                    String columnName = sparseColumnNode.getNodeName();
+                                    // Note that the column value is not in the sparseColumNode, it is the value of
+                                    // the
+                                    // first child of it
+                                    Node sparseColumnValueNode = sparseColumnNode.getFirstChild();
+                                    String columnValue = sparseColumnValueNode.getNodeValue();
+
+                                    System.out.println("\t" + columnName + "\t: " + columnValue);
+                                }
+                            }
+                        } else { // Just print the name + value of non-sparse columns
+                            System.out.println(name + "\t: " + value);
+                        }
+                    }
+                    System.out.println();// New line between rows
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    private static void createColdCallingTable(Statement stmt) throws SQLException {
+        stmt.execute("if exists (select * from sys.objects where name = 'ColdCalling')" + "drop table ColdCalling");
+
+        String sql = "CREATE TABLE ColdCalling  (  ID int IDENTITY(1,1) PRIMARY KEY,  [Date] date,  [Time] time,  PositiveFirstName nvarchar(50) SPARSE,  PositiveLastName nvarchar(50) SPARSE,  SpecialPurposeColumns XML COLUMN_SET FOR ALL_SPARSE_COLUMNS  );";
+        stmt.execute(sql);
+
+        sql = "INSERT ColdCalling ([Date], [Time])  VALUES ('10-13-09','07:05:24')  ";
+        stmt.execute(sql);
+
+        sql = "INSERT ColdCalling ([Date], [Time], PositiveFirstName, PositiveLastName)  VALUES ('07-20-09','05:00:24', 'AA', 'B')  ";
+        stmt.execute(sql);
+
+        sql = "INSERT ColdCalling ([Date], [Time], PositiveFirstName, PositiveLastName)  VALUES ('07-20-09','05:15:00', 'CC', 'DD')  ";
+        stmt.execute(sql);
+    }
+}
Index: src/inicioSesion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\nimport java.awt.*;\r\n\r\npublic class inicioSesion {\r\n    public JPanel JPanelprincipalInicioSesion;\r\n    private JPanel JPanelRegistro;\r\n    private JPanel JPanelInicioSesion;\r\n    private JButton registrarseButton;\r\n    private JPanel cuadroInterior;\r\n    private JTextField introUsuario;\r\n    private JTextField textField1;\r\n    private JLabel logoMarcostv;\r\n    private JButton iniciarSesionButton;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/inicioSesion.java b/src/inicioSesion.java
--- a/src/inicioSesion.java	
+++ b/src/inicioSesion.java	
@@ -1,7 +1,7 @@
 import javax.swing.*;
 import java.awt.*;
 
-public class inicioSesion {
+public class inicioSesion{
     public JPanel JPanelprincipalInicioSesion;
     private JPanel JPanelRegistro;
     private JPanel JPanelInicioSesion;
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/xa/xa_install.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/xa/xa_install.sql b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/xa/xa_install.sql
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/xa/xa_install.sql	
@@ -0,0 +1,92 @@
+-- This script installs the extended stored procedures that implement distributed transaction and XA support
+-- for the Microsoft JDBC Driver for SQL Server.
+-- Works only with SQL 2008 and above.
+--
+-- The JDBC XA distributed transaction components are included in the SQL Server engine in SQL Server 2017
+-- starting with cumulative update 16 and in SQL Server 2019, and can be enabled or disabled with a system
+-- stored procedure. The sqjdbc_xa.dll from the driver is not required and it is recommended to enable the
+-- server components instead for these server versions.
+
+-- Notes for SQL Administrators:
+
+-- #1. Prior to running this script you must copy the extended stored procedure dll SQLJDBC_XA.dll 
+--     to the target SQL Server's Binn folder.
+
+-- #2. Permissions to the distributed transaction support procedures for the Microsoft JDBC Driver 8.4
+--     for SQL Server are granted through the SQL Server role [SqlJDBCXAUser].  To maintain a secure default 
+--     configuration, no user is granted access to this role by default.
+
+-- Drop and re-create the extended stored procedure definitions in master.
+
+use master
+go
+
+-- Drop any existing procedure definitions.
+if exists (select * from sys.objects where object_id = object_id('xp_sqljdbc_xa_init') and OBJECTPROPERTY(object_id, N'IsExtendedProc') = 1) exec sp_dropextendedproc 'xp_sqljdbc_xa_init' 
+if exists (select * from sys.objects where object_id = object_id('xp_sqljdbc_xa_start') and OBJECTPROPERTY(object_id, N'IsExtendedProc') = 1) exec sp_dropextendedproc 'xp_sqljdbc_xa_start'
+if exists (select * from sys.objects where object_id = object_id('xp_sqljdbc_xa_end') and OBJECTPROPERTY(object_id, N'IsExtendedProc') = 1) exec sp_dropextendedproc 'xp_sqljdbc_xa_end'
+if exists (select * from sys.objects where object_id = object_id('xp_sqljdbc_xa_prepare') and OBJECTPROPERTY(object_id, N'IsExtendedProc') = 1) exec sp_dropextendedproc 'xp_sqljdbc_xa_prepare'
+if exists (select * from sys.objects where object_id = object_id('xp_sqljdbc_xa_commit') and OBJECTPROPERTY(object_id, N'IsExtendedProc') = 1) exec sp_dropextendedproc 'xp_sqljdbc_xa_commit'
+if exists (select * from sys.objects where object_id = object_id('xp_sqljdbc_xa_rollback') and OBJECTPROPERTY(object_id, N'IsExtendedProc') = 1) exec sp_dropextendedproc 'xp_sqljdbc_xa_rollback'
+if exists (select * from sys.objects where object_id = object_id('xp_sqljdbc_xa_forget') and OBJECTPROPERTY(object_id, N'IsExtendedProc') = 1) exec sp_dropextendedproc 'xp_sqljdbc_xa_forget'
+if exists (select * from sys.objects where object_id = object_id('xp_sqljdbc_xa_recover') and OBJECTPROPERTY(object_id, N'IsExtendedProc') = 1) exec sp_dropextendedproc 'xp_sqljdbc_xa_recover'
+if exists (select * from sys.objects where object_id = object_id('xp_sqljdbc_xa_rollback_ex') and OBJECTPROPERTY(object_id, N'IsExtendedProc') = 1) exec sp_dropextendedproc 'xp_sqljdbc_xa_rollback_ex'
+if exists (select * from sys.objects where object_id = object_id('xp_sqljdbc_xa_forget_ex') and OBJECTPROPERTY(object_id, N'IsExtendedProc') = 1) exec sp_dropextendedproc 'xp_sqljdbc_xa_forget_ex'
+if exists (select * from sys.objects where object_id = object_id('xp_sqljdbc_xa_prepare_ex') and OBJECTPROPERTY(object_id, N'IsExtendedProc') = 1) exec sp_dropextendedproc 'xp_sqljdbc_xa_prepare_ex'
+if exists (select * from sys.objects where object_id = object_id('xp_sqljdbc_xa_init_ex') and OBJECTPROPERTY(object_id, N'IsExtendedProc') = 1) exec sp_dropextendedproc 'xp_sqljdbc_xa_init_ex'
+go
+
+-- Install the procedures.
+exec sp_addextendedproc 'xp_sqljdbc_xa_init', 'SQLJDBC_XA.dll'
+exec sp_addextendedproc 'xp_sqljdbc_xa_start', 'SQLJDBC_XA.dll'
+exec sp_addextendedproc 'xp_sqljdbc_xa_end', 'SQLJDBC_XA.dll'
+exec sp_addextendedproc 'xp_sqljdbc_xa_prepare', 'SQLJDBC_XA.dll'
+exec sp_addextendedproc 'xp_sqljdbc_xa_commit', 'SQLJDBC_XA.dll'
+exec sp_addextendedproc 'xp_sqljdbc_xa_rollback', 'SQLJDBC_XA.dll'
+exec sp_addextendedproc 'xp_sqljdbc_xa_forget', 'SQLJDBC_XA.dll'
+exec sp_addextendedproc 'xp_sqljdbc_xa_recover', 'SQLJDBC_XA.dll'
+exec sp_addextendedproc 'xp_sqljdbc_xa_rollback_ex', 'SQLJDBC_XA.dll'
+exec sp_addextendedproc 'xp_sqljdbc_xa_forget_ex', 'SQLJDBC_XA.dll'
+exec sp_addextendedproc 'xp_sqljdbc_xa_prepare_ex', 'SQLJDBC_XA.dll'
+exec sp_addextendedproc 'xp_sqljdbc_xa_init_ex', 'SQLJDBC_XA.dll'
+go
+
+-- Create the [SqlJDBCXAUser] role in master database.
+-- The SQL administrator can later add users to this role to allow users to participate 
+-- in Microsoft JDBC Driver 8.4 for SQL Server distributed transactions.
+if exists (select * from sys.schemas where name = 'SqlJDBCXAUser' ) 
+drop schema [SqlJDBCXAUser];
+
+if exists (select * from sys.database_principals where name = 'SqlJDBCXAUser' and type='R') 
+drop role [SqlJDBCXAUser];
+
+create role [SqlJDBCXAUser]
+go
+
+
+-- Grant privileges to [SqlJDBCXAUser] role to the extended stored procedures.
+grant execute on xp_sqljdbc_xa_init to [SqlJDBCXAUser]
+grant execute on xp_sqljdbc_xa_start to [SqlJDBCXAUser]
+grant execute on xp_sqljdbc_xa_end to [SqlJDBCXAUser]
+grant execute on xp_sqljdbc_xa_prepare to [SqlJDBCXAUser]
+grant execute on xp_sqljdbc_xa_commit to [SqlJDBCXAUser]
+grant execute on xp_sqljdbc_xa_rollback to [SqlJDBCXAUser]
+grant execute on xp_sqljdbc_xa_recover to [SqlJDBCXAUser]
+grant execute on xp_sqljdbc_xa_forget to [SqlJDBCXAUser]
+grant execute on xp_sqljdbc_xa_rollback_ex to [SqlJDBCXAUser]
+grant execute on xp_sqljdbc_xa_forget_ex to [SqlJDBCXAUser]
+grant execute on xp_sqljdbc_xa_prepare_ex to [SqlJDBCXAUser]
+grant execute on xp_sqljdbc_xa_init_ex to [SqlJDBCXAUser]
+go
+
+-- Add users to the [SqlJDBCXAUser] role as needed.
+
+-- Example for adding a SQL authentication user to the SqlJDBCXAUser role.
+-- exec sp_addrolemember [SqlJDBCXAUser], 'MySQLUser'
+
+-- Example for adding a windows domain user to the SqlJDBCXAUser role.
+-- exec sp_addrolemember [SqlJDBCXAUser], 'MyDomain\MyWindowsUser'
+
+print ''
+print 'SQLJDBC XA DLL installation script complete.'
+print 'Check for any error messages generated above.'
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/thirdpartynotices.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/thirdpartynotices.txt b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/thirdpartynotices.txt
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/thirdpartynotices.txt	
@@ -0,0 +1,227 @@
+THIRD-PARTY SOFTWARE NOTICES AND INFORMATION FOR MICROSOFT JDBC DRIVER FOR SQL 
+SERVER
+
+Do Not Translate or Localize
+
+This file is based on or incorporates material from the projects listed below (Third Party IP). The original 
+copyright notice and the license under which Microsoft received such Third Party IP, are set forth below. 
+Such licenses and notices are provided for informational purposes only. Microsoft licenses the Third 
+Party IP to you under the licensing terms for the Microsoft product. Microsoft reserves all other rights 
+not expressly granted under this agreement, whether by implication, estoppel or otherwise.
+
+------------------------------------------- START OF THIRD PARTY NOTICES ----------------------------
+
+concurrentlinkedhashmap 1.4.2
+cityhash 
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+------------End of License ----------------------------------------------
+----------------------------------------------- END OF THIRD PARTY NOTICES ------------------------------------------
+
+
+
+
+
+
+
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/release.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/release.txt b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/release.txt
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/release.txt	
@@ -0,0 +1,185 @@
+Release Information
+Microsoft JDBC Driver 12.2 for SQL Server
+
+------------
+INTRODUCTION
+------------
+This file contains late-breaking or other important information that supplements the Microsoft JDBC 
+Driver 12.2 for SQL Server documentation. You should read this file completely before installing 
+the JDBC driver.
+
+Your feedback is very important to us and we will strive to respond to your feedback in a timely 
+manner. For information about providing feedback by using the JDBC driver blogs and online forums, 
+see the Microsoft JDBC Driver 12.2 for SQL Server page at https://aka.ms/mssql-jdbc-feedback
+
+
+------------
+INSTALLATION
+------------
+Instructions for installing the JDBC driver are located in install.txt. Refer to that file for 
+information about installing the JDBC driver on Windows, Linux and macOS operating systems.
+
+
+---------------------------
+SUPPORTED OPERATING SYSTEMS
+---------------------------
+Supported operating systems for Microsoft JDBC Driver 12.2 for SQL Server include:
+  Windows Server 2012
+  Windows Server 2012 R2
+  Windows Server 2016
+  Windows Server 2019
+  Windows Server 2022
+  Windows 8.1
+  Windows 10
+  Windows 11
+  Linux
+  macOS
+
+The list above is an example of some of the supported operating systems. The JDBC driver is designed 
+to work on any operating system that supports the use of a Java Virtual Machine (JVM). 
+
+However, only the latest operating systems of Linux and MacOS (Ubuntu 20.04, Ubuntu 18.04, CentOS 7, SUSE 12,
+ macOS 11) have been tested for compatibility and support.
+
+
+-----------------------
+SUPPORTED JAVA VERSIONS
+-----------------------
+The Microsoft JDBC Driver 12.2 for SQL Server has been tested and supports latest versions of Java 
+Development Kit(JDK) builds from Open JDK and Zulu on supported Operating Systems as mentioned above.
+The below family versions of Java Runtime Environment (JRE) System Library are supported:
+
+  ----------------------------------------------------------------------
+  JRE Family Version | Driver JAR for Maximum Support
+  ----------------------------------------------------------------------
+  8+                 | mssql-jdbc-12.2.0.jre8.jar
+  11+                | mssql-jdbc-12.2.0.jre11.jar
+
+
+----------------
+RELEASE CONTENTS
+----------------
+The Microsoft JDBC Driver 12.2 for SQL Server zip or tar file unpacks the following files 
+in the specified locations, relative to the selected installation directory:
+
+<installation directory>\sqljdbc_<version>\<language>\install.txt
+<installation directory>\sqljdbc_<version>\<language>\release.txt
+<installation directory>\sqljdbc_<version>\<language>\license.txt
+<installation directory>\sqljdbc_<version>\<language>\thirdpartynotices.txt
+<installation directory>\sqljdbc_<version>\<language>\mssql-jdbc-12.2.0.jre8.jar
+<installation directory>\sqljdbc_<version>\<language>\mssql-jdbc-12.2.0.jre11.jar
+<installation directory>\sqljdbc_<version>\<language>\auth\x86\mssql-jdbc_auth-12.2.0.x86.dll
+<installation directory>\sqljdbc_<version>\<language>\auth\x64\mssql-jdbc_auth-12.2.0.x64.dll
+<installation directory>\sqljdbc_<version>\<language>\samples\<sample files...>
+<installation directory>\sqljdbc_<version>\<language>\xa\xa_install.sql
+<installation directory>\sqljdbc_<version>\<language>\xa\x86\sqljdbc_xa.dll
+<installation directory>\sqljdbc_<version>\<language>\xa\x64\sqljdbc_xa.dll
+
+For detailed information about each component please refer to the online documentation,
+Microsoft JDBC Driver for SQL Server Documentation: https://aka.ms/mssql-jdbc
+
+
+-------------
+DOCUMENTATION
+-------------
+This release information, installation instructions, and license terms are included in this package. 
+All other documentation may be found online.
+
+Please note that the offline help files have been discontinued. 
+
+
+---------
+JAR FILES
+---------
+To support backward compatibility and possible upgrade scenarios, the JDBC Driver 12.2 includes 
+three JAR class libraries in each installation package:
+	mssql-jdbc-12.2.0.jre8.jar
+	mssql-jdbc-12.2.0.jre11.jar
+
+
+----------------------
+FEATURE SPECIFIC FILES
+----------------------
+Azure Active Directory and Integrated Authentication (on Windows) components are included 
+in the 'auth' directory.
+
+JDBC distributed transaction components are included in the 'xa' directory.
+
+
+--------------------
+FEATURE DEPENDENCIES
+--------------------
+A few features in Microsoft JDBC Driver 12.2 for SQL Server are dependent on external libraries 
+as listed below:
+
+1. Using 'Always Encrypted' with Azure Key Vault Provider
+   Dependent libraries: azure-keyvault(version 4.5.1), and azure-identity(version 1.7.0-beta.2)
+
+2. Using 'Always Encrypted with secure enclaves'
+   Dependent libraries: com.google.code.gson(version 2.8.9),
+   and org.bouncycastle(version 1.70). org.bouncycastle is only required for JDK 8.
+   
+3. Using 'Azure Active Directory Authentication' on Windows, Linux and macOS Operating Systems
+   Dependent libraries: azure-identity(version 1.7.0-beta.2)
+   
+4. Using 'useFmtOnly' to retrieve parameter metadata
+   Dependent libraries: antlr-runtime (version 4.9.3)
+   
+Detailed information on including these dependent libraries in a Standard Java Application 
+or a Maven Application can be found here: https://go.microsoft.com/fwlink/?linkid=867575
+
+-------
+SAMPLES
+-------
+Sample applications that demonstrate various features of the JDBC driver are included in the 'samples'
+directory. For more details about each sample and how to run them, please refer to the online 
+documentation.
+
+
+-----------
+CHANGE LIST
+-----------
+For a detailed list of changes, fixes, and improvements made in each release, please see: https://aka.ms/mssql-jdbc-release-notes
+
+------------
+KNOWN ISSUES
+------------
+The following are known issues with the Microsoft JDBC Driver 12.2 for SQL Server:
+
+1) CONNECTION DROPPING WITH SQL AZURE
+
+When connecting to SQL Azure, idle connections may be terminated by a network component (such as a 
+firewall) after a period of inactivity. To avoid dropping idle connections by a network component, 
+the following registry settings (or their non-Windows equivalents) should be set on the operating 
+system where the driver is loaded:
+           
+Registry Setting                                                                                Recommended value
+HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\KeepAliveTime             30000
+HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\KeepAliveInterval         1000
+HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\TcpMaxDataRetransmission  10
+
+2) WHEN USING TVP WITH SQL_VARIANT 
+
+2.a) FOR DATE VALUES
+
+When using TVP to populate a table that contains datetime/smalldatetime/date values stored in sql_variant column, 
+calling getDateTime()/getSmallDateTime()/getDate() on ResultSet does not work and throws the following exception:
+
+	java.lang.String cannot be cast to java.sql.Timestamp
+
+Workaround: use getString() or getObject() instead.
+
+2.b) USING TVP WITH SQL_VARIANT FOR NULL VALUES
+
+If you are using TVP to populate a table and send NULL value to sql_variant column type, you will encounter
+an exception as inserting NULL value with column type sql_variant in TVP is currently not supported.
+
+
+3) WHEN USING NTLM AUTHENTICATION
+
+Enabling Extended Protection and encrypted connections at the same time is currently not supported.
+
+4) WHEN USING useFmtOnly
+
+There are some issues with the feature, which are caused by deficiencies in SQL parsing logic.
+See https://aka.ms/mssql-jdbc-usefmtonly for more details and workaround suggestions.
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/redist.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/redist.txt b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/redist.txt
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/redist.txt	
@@ -0,0 +1,5 @@
+Distributable Code for the Microsoft JDBC Driver for SQL Server
+
+The entire package may be redistributed.
+
+For the latest version of this REDIST file, please visit https://aka.ms/jdbceularedist
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/license.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/license.txt b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/license.txt
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/license.txt	
@@ -0,0 +1,65 @@
+MICROSOFT SOFTWARE LICENSE TERMS
+MICROSOFT JDBC DRIVER 12.2 FOR SQL SERVER
+
+These license terms are an agreement between you and Microsoft Corporation (or one of its affiliates). They apply to the software named above and any Microsoft services or software updates (except to the extent such services or updates are accompanied by new or additional terms, in which case those different terms apply prospectively and do not alter your or Microsoft’s rights relating to pre-updated software or services). IF YOU COMPLY WITH THESE LICENSE TERMS, YOU HAVE THE RIGHTS BELOW.  BY USING THE SOFTWARE, YOU ACCEPT THESE TERMS.
+
+1. INSTALLATION AND USE RIGHTS.
+	a) General. You may install and use any number of copies of the software to develop and test your applications.
+	b) Third Party Software. The software may include third party applications that Microsoft, not the third party, licenses to you under this agreement. Any included notices for third party applications are for your information only.
+
+2. DISTRIBUTABLE CODE. The software may contain code you are permitted to distribute (i.e. make available for third parties) in applications you develop, as described in this Section. 
+	a) Distribution Rights. The code and test files described below are distributable if included with the software.
+		i. REDIST.TXT Files. You may copy and distribute the object code form of code listed on the REDIST list in the software, if any, or listed at REDIST (https://aka.ms/jdbceularedist);
+		ii. Image Library. You may copy and distribute images, graphics, and animations in the Image Library as described in the software documentation;
+		iii. Sample Code, Templates, and Styles. You may copy, modify, and distribute the source and object code form of code marked as “sample”, “template”, “simple styles”, and “sketch styles”; and
+		iv. Third Party Distribution. You may permit distributors of your applications to copy and distribute any of this distributable code you elect to distribute with your applications.
+	b) Distribution Requirements. For any code you distribute, you must:
+		i. add significant primary functionality to it in your applications;
+		ii. require distributors and external end users to agree to terms that protect it and Microsoft at least as much as this agreement; and
+		iii. indemnify, defend, and hold harmless Microsoft from any claims, including attorneys’ fees, related to the distribution or use of your applications, except to the extent that any claim is based solely on the unmodified distributable code.
+	c) Distribution Restrictions. You may not:
+		i. use Microsoft’s trademarks or trade dress in your application in any way that suggests your application comes from or is endorsed by Microsoft; or
+		ii. modify or distribute the source code of any distributable code so that any part of it becomes subject to any license that requires that the distributable code, any other part of the software, or any of Microsoft’s other intellectual property be disclosed or distributed in source code form, or that others have the right to modify it.
+
+3. DATA COLLECTION. Some features in the software may enable collection of data from users of your applications that access or use the software. If you use these features to enable data collection in your applications, you must comply with applicable law, including getting any required user consent, and maintain a prominent privacy policy that accurately informs users about how you use, collect, and share their data. You agree to comply with all applicable provisions of the Microsoft Privacy Statement at [https://go.microsoft.com/fwlink/?LinkId=521839].
+
+4. SCOPE OF LICENSE. The software is licensed, not sold. Microsoft reserves all other rights. Unless applicable law gives you more rights despite this limitation, you will not (and have no right to):
+	a) work around any technical limitations in the software that only allow you to use it in certain ways;
+	b) reverse engineer, decompile or disassemble the software;
+	c) remove, minimize, block, or modify any notices of Microsoft or its suppliers in the software;
+	d) use the software in any way that is against the law or to create or propagate malware; or
+	e) share, publish, distribute, or lend the software (except for any distributable code, subject to the terms above), provide the software as a stand-alone hosted solution for others to use, or transfer the software or this agreement to any third party.
+
+5. EXPORT RESTRICTIONS. You must comply with all domestic and international export laws and regulations that apply to the software, which include restrictions on destinations, end users, and end use. For further information on export restrictions, visit http://aka.ms/exporting.
+
+6. SUPPORT SERVICES. Microsoft is not obligated under this agreement to provide any support services for the software. Any support provided is “as is”, “with all faults”, and without warranty of any kind.
+
+7. UPDATES. The software may periodically check for updates, and download and install them for you. You may obtain updates only from Microsoft or authorized sources. Microsoft may need to update your system to provide you with updates. You agree to receive these automatic updates without any additional notice. Updates may not include or support all existing software features, services, or peripheral devices.
+
+8. ENTIRE AGREEMENT. This agreement, and any other terms Microsoft may provide for supplements, updates, or third-party applications, is the entire agreement for the software.
+
+9. APPLICABLE LAW AND PLACE TO RESOLVE DISPUTES. If you acquired the software in the United States or Canada, the laws of the state or province where you live (or, if a business, where your principal place of business is located) govern the interpretation of this agreement, claims for its breach, and all other claims (including consumer protection, unfair competition, and tort claims), regardless of conflict of laws principles. If you acquired the software in any other country, its laws apply. If U.S. federal jurisdiction exists, you and Microsoft consent to exclusive jurisdiction and venue in the federal court in King County, Washington for all disputes heard in court. If not, you and Microsoft consent to exclusive jurisdiction and venue in the Superior Court of King County, Washington for all disputes heard in court.
+
+10. CONSUMER RIGHTS; REGIONAL VARIATIONS. This agreement describes certain legal rights. You may have other rights, including consumer rights, under the laws of your state or country. Separate and apart from your relationship with Microsoft, you may also have rights with respect to the party from which you acquired the software. This agreement does not change those other rights if the laws of your state or country do not permit it to do so. For example, if you acquired the software in one of the below regions, or mandatory country law applies, then the following provisions apply to you:
+	a) Australia. You have statutory guarantees under the Australian Consumer Law and nothing in this agreement is intended to affect those rights.
+	b) Canada. If you acquired this software in Canada, you may stop receiving updates by turning off the automatic update feature, disconnecting your device from the Internet (if and when you re-connect to the Internet, however, the software will resume checking for and installing updates), or uninstalling the software. The product documentation, if any, may also specify how to turn off updates for your specific device or software.
+	c) Germany and Austria.
+		i.	Warranty. The properly licensed software will perform substantially as described in any Microsoft materials that accompany the software. However, Microsoft gives no contractual guarantee in relation to the licensed software.
+		ii.	Limitation of Liability. In case of intentional conduct, gross negligence, claims based on the Product Liability Act, as well as, in case of death or personal or physical injury, Microsoft is liable according to the statutory law.
+		Subject to the foregoing clause ii., Microsoft will only be liable for slight negligence if Microsoft is in breach of such material contractual obligations, the fulfillment of which facilitate the due performance of this agreement, the breach of which would endanger the purpose of this agreement and the compliance with which a party may constantly trust in (so-called "cardinal obligations"). In other cases of slight negligence, Microsoft will not be liable for slight negligence.
+
+11. DISCLAIMER OF WARRANTY. THE SOFTWARE IS LICENSED “AS IS.” YOU BEAR THE RISK OF USING IT. MICROSOFT GIVES NO EXPRESS WARRANTIES, GUARANTEES, OR CONDITIONS. TO THE EXTENT PERMITTED UNDER APPLICABLE LAWS, MICROSOFT EXCLUDES ALL IMPLIED WARRANTIES, INCLUDING MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
+
+12. LIMITATION ON AND EXCLUSION OF DAMAGES. IF YOU HAVE ANY BASIS FOR RECOVERING DAMAGES DESPITE THE PRECEDING DISCLAIMER OF WARRANTY, YOU CAN RECOVER FROM MICROSOFT AND ITS SUPPLIERS ONLY DIRECT DAMAGES UP TO U.S. $5.00. YOU CANNOT RECOVER ANY OTHER DAMAGES, INCLUDING CONSEQUENTIAL, LOST PROFITS, SPECIAL, INDIRECT, OR INCIDENTAL DAMAGES.
+This limitation applies to (a) anything related to the software, services, content (including code) on third party Internet sites, or third party applications; and (b) claims for breach of contract, warranty, guarantee, or condition; strict liability, negligence, or other tort; or any other claim; in each case to the extent permitted by applicable law.
+It also applies even if Microsoft knew or should have known about the possibility of the damages. The above limitation or exclusion may not apply to you because your state, province, or country may not allow the exclusion or limitation of incidental, consequential, or other damages.
+
+Please note: As this software is distributed in Canada, some of the clauses in this agreement are provided below in French.
+Remarque: Ce logiciel étant distribué au Canada, certaines des clauses dans ce contrat sont fournies ci-dessous en français.
+EXONÉRATION DE GARANTIE. Le logiciel visé par une licence est offert « tel quel ». Toute utilisation de ce logiciel est à votre seule risque et péril. Microsoft n’accorde aucune autre garantie expresse. Vous pouvez bénéficier de droits additionnels en vertu du droit local sur la protection des consommateurs, que ce contrat ne peut modifier. La ou elles sont permises par le droit locale, les garanties implicites de qualité marchande, d’adéquation à un usage particulier et d’absence de contrefaçon sont exclues.
+LIMITATION DES DOMMAGES-INTÉRÊTS ET EXCLUSION DE RESPONSABILITÉ POUR LES DOMMAGES. Vous pouvez obtenir de Microsoft et de ses fournisseurs une indemnisation en cas de dommages directs uniquement à hauteur de 5,00 $ US. Vous ne pouvez prétendre à aucune indemnisation pour les autres dommages, y compris les dommages spéciaux, indirects ou accessoires et pertes de bénéfices.
+Cette limitation concerne:
+•	tout ce qui est relié au logiciel, aux services ou au contenu (y compris le code) figurant sur des sites Internet tiers ou dans des programmes tiers; et
+•	les réclamations au titre de violation de contrat ou de garantie, ou au titre de responsabilité stricte, de négligence ou d’une autre faute dans la limite autorisée par la loi en vigueur.
+Elle s’applique également, même si Microsoft connaissait ou devrait connaître l’éventualité d’un tel dommage. Si votre pays n’autorise pas l’exclusion ou la limitation de responsabilité pour les dommages indirects, accessoires ou de quelque nature que ce soit, il se peut que la limitation ou l’exclusion ci-dessus ne s’appliquera pas à votre égard.
+EFFET JURIDIQUE. Le présent contrat décrit certains droits juridiques. Vous pourriez avoir d’autres droits prévus par les lois de votre pays. Le présent contrat ne modifie pas les droits que vous confèrent les lois de votre pays si celles-ci ne le permettent pas.
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/install.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/install.txt b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/install.txt
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/install.txt	
@@ -0,0 +1,39 @@
+Installation Instructions
+Microsoft JDBC Driver 12.2 for SQL Server
+
+
+INTRODUCTION
+------------
+These are instructions for unpacking the sqljdbc_<version>_enu.zip and the 
+sqljdbc_<version>_enu.tar.gz.
+
+
+WINDOWS
+-------
+1. Read the license.txt file. Downloading and using the Microsoft JDBC Driver 12.2 for SQL Server signifies acceptance of this license.
+
+2. Download the sqljdbc_<version>_enu.zip to a temporary directory.
+
+3. Extract sqljdbc_<version>_enu.zip
+
+4. Enter an extract directory when prompted; it is recommended that you unpack
+   this zip file in %ProgramFiles% with the default directory:
+
+	Microsoft JDBC DRIVER 12.2 for SQL Server
+
+
+UNIX
+----
+1. Read the license.txt file. Downloading and using the Microsoft JDBC Driver 12.2 for SQL Server signifies acceptance of this license.
+
+2. Download the sqljdbc_<version>_enu.tar.gz to a temporary directory.
+
+3. To unpack the zipped tar, navigate to the directory where you want the
+   driver unpacked and type:
+
+	gzip -d sqljdbc_<version>_enu.tar.gz
+
+4. To unpack the tar, move it to the directory where you want the driver 
+   installed and type:
+
+	tar -xf sqljdbc_<version>_enu.tar
Index: cache/usr.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cache/usr.txt b/cache/usr.txt
new file mode 100644
--- /dev/null	
+++ b/cache/usr.txt	
@@ -0,0 +1,1 @@
+Troy;troy;admin
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_02_06_2023_8_43_[Changes]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_02_06_2023_8_43_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_02_06_2023_8_43_[Changes]/shelved.patch
new file mode 100644
--- /dev/null	
+++ b/.idea/shelf/Uncommitted_changes_before_Checkout_at_02_06_2023_8_43_[Changes]/shelved.patch	
@@ -0,0 +1,46 @@
+Index: .idea/workspace.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"9e01a84d-9f13-4afb-a118-0660f614f771\" name=\"Changes\" comment=\"PANTALLAS VER SERIE, PELUCULA Y DOCUMENTAL\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/Temporada.form\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/Temporada.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/dbnavigator.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/dbnavigator.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\"><![CDATA[{\r\n  \"lastFilter\": {\r\n    \"state\": \"OPEN\"\r\n  }\r\n}]]></component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"selectedUrlAndAccountId\">\r\n      <UrlAndAccount>\r\n        <option name=\"accountId\" value=\"5beebe44-43d8-4a8a-9e5f-ece31605591c\" />\r\n        <option name=\"url\" value=\"https://github.com/Kikoromero97/MarcosTVDAM.git\" />\r\n      </UrlAndAccount>\r\n    </option>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2QSKOa6St9dRyNvY2AMsTDw7C0W\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/troy_/Documents/MarcosTV/src&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\troy_\\Documents\\MarcosTV\\src\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"9e01a84d-9f13-4afb-a118-0660f614f771\" name=\"Changes\" comment=\"\" />\r\n      <created>1685341512459</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1685341512459</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Pantalla inicio de sesion\">\r\n      <created>1685352671244</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685352671244</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Pantalla crear pelicula\">\r\n      <created>1685444628173</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685444628173</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Pantalla crear serie\">\r\n      <created>1685445918435</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685445918435</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"PANTALLAS VER SERIE, PELUCULA Y DOCUMENTAL\">\r\n      <created>1685446749519</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685446749519</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"5\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"empleado\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Pantalla inicio de sesion\" />\r\n    <MESSAGE value=\"Pantalla crear pelicula\" />\r\n    <MESSAGE value=\"Pantalla crear serie\" />\r\n    <MESSAGE value=\"PANTALLAS VER SERIE, PELUCULA Y DOCUMENTAL\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"PANTALLAS VER SERIE, PELUCULA Y DOCUMENTAL\" />\r\n  </component>\r\n</project>
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/workspace.xml b/.idea/workspace.xml
+--- a/.idea/workspace.xml	
++++ b/.idea/workspace.xml	
+@@ -4,11 +4,7 @@
+     <option name="autoReloadType" value="SELECTIVE" />
+   </component>
+   <component name="ChangeListManager">
+-    <list default="true" id="9e01a84d-9f13-4afb-a118-0660f614f771" name="Changes" comment="PANTALLAS VER SERIE, PELUCULA Y DOCUMENTAL">
+-      <change afterPath="$PROJECT_DIR$/src/Temporada.form" afterDir="false" />
+-      <change afterPath="$PROJECT_DIR$/src/Temporada.java" afterDir="false" />
+-      <change beforePath="$PROJECT_DIR$/.idea/dbnavigator.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dbnavigator.xml" afterDir="false" />
+-    </list>
++    <list default="true" id="9e01a84d-9f13-4afb-a118-0660f614f771" name="Changes" comment="Eliminado el paquete de DBManager y añadido un UserManager.&#10;Código documentado." />
+     <option name="SHOW_DIALOG" value="false" />
+     <option name="HIGHLIGHT_CONFLICTS" value="true" />
+     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+@@ -22,13 +18,18 @@
+     </option>
+   </component>
+   <component name="Git.Settings">
++    <option name="RECENT_BRANCH_BY_REPOSITORY">
++      <map>
++        <entry key="$PROJECT_DIR$" value="develop" />
++      </map>
++    </option>
+     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+   </component>
+-  <component name="GitHubPullRequestSearchHistory"><![CDATA[{
+-  "lastFilter": {
+-    "state": "OPEN"
++  <component name="GitHubPullRequestSearchHistory">{
++  &quot;lastFilter&quot;: {
++    &quot;state&quot;: &quot;OPEN&quot;
+   }
+-}]]></component>
++}</component>
+   <component name="GithubPullRequestsUISettings">
+     <option name="selectedUrlAndAccountId">
+       <UrlAndAccount>
Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_06_2023_9_32_[Changes]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_06_2023_9_32_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_02_06_2023_9_32_[Changes]/shelved.patch
new file mode 100644
--- /dev/null	
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_02_06_2023_9_32_[Changes]/shelved.patch	
@@ -0,0 +1,52 @@
+Index: .idea/workspace.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"9e01a84d-9f13-4afb-a118-0660f614f771\" name=\"Changes\" comment=\"PANTALLAS VER SERIE, PELUCULA Y DOCUMENTAL\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/Temporada.form\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/Temporada.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/dbnavigator.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/dbnavigator.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\"><![CDATA[{\r\n  \"lastFilter\": {\r\n    \"state\": \"OPEN\"\r\n  }\r\n}]]></component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"selectedUrlAndAccountId\">\r\n      <UrlAndAccount>\r\n        <option name=\"accountId\" value=\"5beebe44-43d8-4a8a-9e5f-ece31605591c\" />\r\n        <option name=\"url\" value=\"https://github.com/Kikoromero97/MarcosTVDAM.git\" />\r\n      </UrlAndAccount>\r\n    </option>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2QSKOa6St9dRyNvY2AMsTDw7C0W\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/troy_/Documents/MarcosTV/src&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\troy_\\Documents\\MarcosTV\\src\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"9e01a84d-9f13-4afb-a118-0660f614f771\" name=\"Changes\" comment=\"\" />\r\n      <created>1685341512459</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1685341512459</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Pantalla inicio de sesion\">\r\n      <created>1685352671244</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685352671244</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Pantalla crear pelicula\">\r\n      <created>1685444628173</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685444628173</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Pantalla crear serie\">\r\n      <created>1685445918435</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685445918435</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"PANTALLAS VER SERIE, PELUCULA Y DOCUMENTAL\">\r\n      <created>1685446749519</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685446749519</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"5\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"empleado\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Pantalla inicio de sesion\" />\r\n    <MESSAGE value=\"Pantalla crear pelicula\" />\r\n    <MESSAGE value=\"Pantalla crear serie\" />\r\n    <MESSAGE value=\"PANTALLAS VER SERIE, PELUCULA Y DOCUMENTAL\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"PANTALLAS VER SERIE, PELUCULA Y DOCUMENTAL\" />\r\n  </component>\r\n</project>
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/workspace.xml b/.idea/workspace.xml
+--- a/.idea/workspace.xml	(revision f0ee3b74601d8c7da4d4750bfd76eb5833713396)
++++ b/.idea/workspace.xml	(date 1685691065645)
+@@ -24,11 +24,11 @@
+   <component name="Git.Settings">
+     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+   </component>
+-  <component name="GitHubPullRequestSearchHistory"><![CDATA[{
+-  "lastFilter": {
+-    "state": "OPEN"
++  <component name="GitHubPullRequestSearchHistory">{
++  &quot;lastFilter&quot;: {
++    &quot;state&quot;: &quot;OPEN&quot;
+   }
+-}]]></component>
++}</component>
+   <component name="GithubPullRequestsUISettings">
+     <option name="selectedUrlAndAccountId">
+       <UrlAndAccount>
+@@ -96,7 +96,14 @@
+       <option name="project" value="LOCAL" />
+       <updated>1685446749519</updated>
+     </task>
+-    <option name="localTasksCounter" value="5" />
++    <task id="LOCAL-00005" summary="DBManager con nuevas funciones&#10;DBEmpleados creado y documentado.">
++      <created>1685691025164</created>
++      <option name="number" value="00005" />
++      <option name="presentableId" value="LOCAL-00005" />
++      <option name="project" value="LOCAL" />
++      <updated>1685691025165</updated>
++    </task>
++    <option name="localTasksCounter" value="6" />
+     <servers />
+   </component>
+   <component name="Vcs.Log.Tabs.Properties">
+@@ -127,6 +134,7 @@
+     <MESSAGE value="Pantalla crear pelicula" />
+     <MESSAGE value="Pantalla crear serie" />
+     <MESSAGE value="PANTALLAS VER SERIE, PELUCULA Y DOCUMENTAL" />
+-    <option name="LAST_COMMIT_MESSAGE" value="PANTALLAS VER SERIE, PELUCULA Y DOCUMENTAL" />
++    <MESSAGE value="DBManager con nuevas funciones&#10;DBEmpleados creado y documentado." />
++    <option name="LAST_COMMIT_MESSAGE" value="DBManager con nuevas funciones&#10;DBEmpleados creado y documentado." />
+   </component>
+ </project>
+\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_rebase_[Changes]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_rebase_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_rebase_[Changes]/shelved.patch
new file mode 100644
--- /dev/null	
+++ b/.idea/shelf/Uncommitted_changes_before_rebase_[Changes]/shelved.patch	
@@ -0,0 +1,143 @@
+Index: src/ListarEmpleados.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>import javax.swing.*;\r\n\r\npublic class ListarEmpleados {\r\n    private JPanel panelBusqueda;\r\n    private JTextField txtFldNif;\r\n    private JTextField txtFldNombre;\r\n    private JTextField txtFldEmail;\r\n    private JTextField txtFldDepartamento;\r\n    private JTextField txtFldTelefono;\r\n    private JLabel logoMARCOSTV;\r\n    private JButton confirmarButton;\r\n    private JButton cancelarButton;\r\n    private JTextField txtFldCodigo;\r\n    private JTable tableEmpleados;\r\n    private JPanel panelPrincipal;\r\n    private JScrollPane scrollPanel;\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/ListarEmpleados.java b/src/ListarEmpleados.java
+--- a/src/ListarEmpleados.java	(revision 54939cb14a3ccb1a1dc938355f7c59a2d2e999f3)
++++ b/src/ListarEmpleados.java	(date 1685692934230)
+@@ -1,6 +1,7 @@
+ import javax.swing.*;
++import javax.swing.table.DefaultTableModel;
+ 
+-public class ListarEmpleados {
++public class ListarEmpleados extends JFrame{
+     private JPanel panelBusqueda;
+     private JTextField txtFldNif;
+     private JTextField txtFldNombre;
+@@ -14,4 +15,22 @@
+     private JTable tableEmpleados;
+     private JPanel panelPrincipal;
+     private JScrollPane scrollPanel;
++
++    private final String[] COLUMNAS = {"codigo", "NIF", "Nombre Completo"};
++
++    public ListarEmpleados(){
++        super("Empleados");
++        setSize(700, 500);
++        setContentPane(panelPrincipal);
++        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
++        setVisible(true);
++        setLocationRelativeTo(null);
++    }
++
++    private void loadTabla(String[][] data){
++        DefaultTableModel table = new DefaultTableModel(data, COLUMNAS);
++        tableEmpleados.setModel(table);
++        Utilitis. (tableEmpleados);
++        tableEmpleados.setVisible(true);
++    }
+ }
+Index: .idea/workspace.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"9e01a84d-9f13-4afb-a118-0660f614f771\" name=\"Changes\" comment=\"PANTALLAS VER SERIE, PELUCULA Y DOCUMENTAL\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/DBEmpleados.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/DBManager.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/DBManager.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Main.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"develop\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"selectedUrlAndAccountId\">\r\n      <UrlAndAccount>\r\n        <option name=\"accountId\" value=\"5beebe44-43d8-4a8a-9e5f-ece31605591c\" />\r\n        <option name=\"url\" value=\"https://github.com/Kikoromero97/MarcosTVDAM.git\" />\r\n      </UrlAndAccount>\r\n    </option>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2QSKOa6St9dRyNvY2AMsTDw7C0W\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"last_opened_file_path\": \"C:/Users/dam_bt/Downloads/Ejemplo Programa Gestión Clientes\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\troy_\\Documents\\MarcosTV\\src\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"9e01a84d-9f13-4afb-a118-0660f614f771\" name=\"Changes\" comment=\"\" />\r\n      <created>1685341512459</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1685341512459</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Pantalla inicio de sesion\">\r\n      <created>1685352671244</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685352671244</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Pantalla crear pelicula\">\r\n      <created>1685444628173</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685444628173</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Pantalla crear serie\">\r\n      <created>1685445918435</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685445918435</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"PANTALLAS VER SERIE, PELUCULA Y DOCUMENTAL\">\r\n      <created>1685446749519</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685446749519</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"5\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"empleado\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Pantalla inicio de sesion\" />\r\n    <MESSAGE value=\"Pantalla crear pelicula\" />\r\n    <MESSAGE value=\"Pantalla crear serie\" />\r\n    <MESSAGE value=\"PANTALLAS VER SERIE, PELUCULA Y DOCUMENTAL\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"PANTALLAS VER SERIE, PELUCULA Y DOCUMENTAL\" />\r\n  </component>\r\n</project>
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/workspace.xml b/.idea/workspace.xml
+--- a/.idea/workspace.xml	(revision 54939cb14a3ccb1a1dc938355f7c59a2d2e999f3)
++++ b/.idea/workspace.xml	(date 1685701759366)
+@@ -4,11 +4,10 @@
+     <option name="autoReloadType" value="SELECTIVE" />
+   </component>
+   <component name="ChangeListManager">
+-    <list default="true" id="9e01a84d-9f13-4afb-a118-0660f614f771" name="Changes" comment="PANTALLAS VER SERIE, PELUCULA Y DOCUMENTAL">
+-      <change afterPath="$PROJECT_DIR$/src/DBEmpleados.java" afterDir="false" />
++    <list default="true" id="9e01a84d-9f13-4afb-a118-0660f614f771" name="Changes" comment="Utilitis creado y documentado">
+       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+-      <change beforePath="$PROJECT_DIR$/src/DBManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/DBManager.java" afterDir="false" />
+-      <change beforePath="$PROJECT_DIR$/src/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Main.java" afterDir="false" />
++      <change beforePath="$PROJECT_DIR$/src/ListarEmpleados.form" beforeDir="false" afterPath="$PROJECT_DIR$/src/ListarEmpleados.form" afterDir="false" />
++      <change beforePath="$PROJECT_DIR$/src/ListarEmpleados.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/ListarEmpleados.java" afterDir="false" />
+     </list>
+     <option name="SHOW_DIALOG" value="false" />
+     <option name="HIGHLIGHT_CONFLICTS" value="true" />
+@@ -52,14 +51,14 @@
+     <option name="hideEmptyMiddlePackages" value="true" />
+     <option name="showLibraryContents" value="true" />
+   </component>
+-  <component name="PropertiesComponent"><![CDATA[{
+-  "keyToString": {
+-    "RunOnceActivity.OpenProjectViewOnStart": "true",
+-    "RunOnceActivity.ShowReadmeOnStart": "true",
+-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+-    "last_opened_file_path": "C:/Users/dam_bt/Downloads/Ejemplo Programa Gestión Clientes"
++  <component name="PropertiesComponent">{
++  &quot;keyToString&quot;: {
++    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
++    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
++    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
++    &quot;last_opened_file_path&quot;: &quot;E:/DAM/1º DAM/Programación/UD13-Acesso a la bd/Practica1&quot;
+   }
+-}]]></component>
++}</component>
+   <component name="RecentsManager">
+     <key name="CopyFile.RECENT_KEYS">
+       <recent name="C:\Users\troy_\Documents\MarcosTV\src" />
+@@ -102,7 +101,14 @@
+       <option name="project" value="LOCAL" />
+       <updated>1685446749519</updated>
+     </task>
+-    <option name="localTasksCounter" value="5" />
++    <task id="LOCAL-00005" summary="Utilitis creado y documentado">
++      <created>1685701649344</created>
++      <option name="number" value="00005" />
++      <option name="presentableId" value="LOCAL-00005" />
++      <option name="project" value="LOCAL" />
++      <updated>1685701649344</updated>
++    </task>
++    <option name="localTasksCounter" value="6" />
+     <servers />
+   </component>
+   <component name="Vcs.Log.Tabs.Properties">
+@@ -116,7 +122,7 @@
+                   <entry key="branch">
+                     <value>
+                       <list>
+-                        <option value="empleado" />
++                        <option value="utillitis" />
+                       </list>
+                     </value>
+                   </entry>
+@@ -133,6 +139,7 @@
+     <MESSAGE value="Pantalla crear pelicula" />
+     <MESSAGE value="Pantalla crear serie" />
+     <MESSAGE value="PANTALLAS VER SERIE, PELUCULA Y DOCUMENTAL" />
+-    <option name="LAST_COMMIT_MESSAGE" value="PANTALLAS VER SERIE, PELUCULA Y DOCUMENTAL" />
++    <MESSAGE value="Utilitis creado y documentado" />
++    <option name="LAST_COMMIT_MESSAGE" value="Utilitis creado y documentado" />
+   </component>
+ </project>
+\ No newline at end of file
+Index: src/ListarEmpleados.form
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<form xmlns=\"http://www.intellij.com/uidesigner/form/\" version=\"1\" bind-to-class=\"ListarEmpleados\">\r\n  <grid id=\"27dc6\" binding=\"panelPrincipal\" layout-manager=\"GridLayoutManager\" row-count=\"2\" column-count=\"3\" same-size-horizontally=\"false\" same-size-vertically=\"false\" hgap=\"-1\" vgap=\"-1\">\r\n    <margin top=\"0\" left=\"0\" bottom=\"0\" right=\"0\"/>\r\n    <constraints>\r\n      <xy x=\"20\" y=\"20\" width=\"631\" height=\"439\"/>\r\n    </constraints>\r\n    <properties>\r\n      <background color=\"-2960686\"/>\r\n    </properties>\r\n    <border type=\"none\"/>\r\n    <children>\r\n      <grid id=\"bbde4\" binding=\"panelBusqueda\" layout-manager=\"GridLayoutManager\" row-count=\"5\" column-count=\"7\" same-size-horizontally=\"false\" same-size-vertically=\"false\" hgap=\"-1\" vgap=\"-1\">\r\n        <margin top=\"0\" left=\"0\" bottom=\"0\" right=\"0\"/>\r\n        <constraints>\r\n          <grid row=\"0\" column=\"1\" row-span=\"1\" col-span=\"1\" vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"0\" indent=\"0\" use-parent-layout=\"false\"/>\r\n        </constraints>\r\n        <properties>\r\n          <background color=\"-2960686\"/>\r\n        </properties>\r\n        <border type=\"none\"/>\r\n        <children>\r\n          <vspacer id=\"240a5\">\r\n            <constraints>\r\n              <grid row=\"1\" column=\"0\" row-span=\"4\" col-span=\"1\" vsize-policy=\"6\" hsize-policy=\"1\" anchor=\"0\" fill=\"2\" indent=\"0\" use-parent-layout=\"false\"/>\r\n            </constraints>\r\n          </vspacer>\r\n          <vspacer id=\"a3359\">\r\n            <constraints>\r\n              <grid row=\"1\" column=\"6\" row-span=\"4\" col-span=\"1\" vsize-policy=\"6\" hsize-policy=\"1\" anchor=\"0\" fill=\"2\" indent=\"0\" use-parent-layout=\"false\"/>\r\n            </constraints>\r\n          </vspacer>\r\n          <component id=\"b19de\" class=\"javax.swing.JLabel\">\r\n            <constraints>\r\n              <grid row=\"0\" column=\"2\" row-span=\"1\" col-span=\"4\" vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"0\" fill=\"0\" indent=\"0\" use-parent-layout=\"false\"/>\r\n            </constraints>\r\n            <properties>\r\n              <foreground color=\"-16777216\"/>\r\n              <text value=\"MIEMBRO DE MARCOS TV:\"/>\r\n            </properties>\r\n          </component>\r\n          <component id=\"e90c4\" class=\"javax.swing.JTextField\" binding=\"txtFldEmail\">\r\n            <constraints>\r\n              <grid row=\"3\" column=\"4\" row-span=\"1\" col-span=\"2\" vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" indent=\"0\" use-parent-layout=\"false\">\r\n                <preferred-size width=\"150\" height=\"-1\"/>\r\n              </grid>\r\n            </constraints>\r\n            <properties>\r\n              <editable value=\"true\"/>\r\n            </properties>\r\n          </component>\r\n          <component id=\"a6bee\" class=\"javax.swing.JLabel\" binding=\"logoMARCOSTV\">\r\n            <constraints>\r\n              <grid row=\"0\" column=\"1\" row-span=\"1\" col-span=\"1\" vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"8\" fill=\"0\" indent=\"0\" use-parent-layout=\"false\"/>\r\n            </constraints>\r\n            <properties>\r\n              <icon value=\"imagen/iconoMarcos.png\"/>\r\n              <text value=\"\"/>\r\n            </properties>\r\n          </component>\r\n          <component id=\"c6507\" class=\"javax.swing.JLabel\">\r\n            <constraints>\r\n              <grid row=\"2\" column=\"1\" row-span=\"1\" col-span=\"1\" vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"4\" fill=\"0\" indent=\"0\" use-parent-layout=\"false\"/>\r\n            </constraints>\r\n            <properties>\r\n              <foreground color=\"-16777216\"/>\r\n              <text value=\"NOMBRE:\"/>\r\n            </properties>\r\n          </component>\r\n          <component id=\"606c5\" class=\"javax.swing.JTextField\" binding=\"txtFldNombre\">\r\n            <constraints>\r\n              <grid row=\"2\" column=\"2\" row-span=\"1\" col-span=\"4\" vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" indent=\"0\" use-parent-layout=\"false\">\r\n                <preferred-size width=\"150\" height=\"-1\"/>\r\n              </grid>\r\n            </constraints>\r\n            <properties>\r\n              <editable value=\"true\"/>\r\n              <text value=\"\"/>\r\n            </properties>\r\n          </component>\r\n          <component id=\"d8819\" class=\"javax.swing.JTextField\" binding=\"txtFldNif\">\r\n            <constraints>\r\n              <grid row=\"1\" column=\"4\" row-span=\"1\" col-span=\"2\" vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" indent=\"0\" use-parent-layout=\"false\">\r\n                <preferred-size width=\"150\" height=\"-1\"/>\r\n              </grid>\r\n            </constraints>\r\n            <properties>\r\n              <editable value=\"true\"/>\r\n            </properties>\r\n          </component>\r\n          <component id=\"5bf59\" class=\"javax.swing.JLabel\">\r\n            <constraints>\r\n              <grid row=\"1\" column=\"3\" row-span=\"1\" col-span=\"1\" vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"4\" fill=\"0\" indent=\"0\" use-parent-layout=\"false\"/>\r\n            </constraints>\r\n            <properties>\r\n              <foreground color=\"-16777216\"/>\r\n              <text value=\"NIF:\"/>\r\n            </properties>\r\n          </component>\r\n          <component id=\"55c57\" class=\"javax.swing.JLabel\">\r\n            <constraints>\r\n              <grid row=\"3\" column=\"1\" row-span=\"1\" col-span=\"1\" vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"5\" fill=\"0\" indent=\"0\" use-parent-layout=\"false\"/>\r\n            </constraints>\r\n            <properties>\r\n              <foreground color=\"-16777216\"/>\r\n              <text value=\"TELÉFONO:\"/>\r\n            </properties>\r\n          </component>\r\n          <component id=\"c257f\" class=\"javax.swing.JLabel\">\r\n            <constraints>\r\n              <grid row=\"3\" column=\"3\" row-span=\"1\" col-span=\"1\" vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"4\" fill=\"0\" indent=\"0\" use-parent-layout=\"false\"/>\r\n            </constraints>\r\n            <properties>\r\n              <foreground color=\"-16777216\"/>\r\n              <text value=\"EMAIL:\"/>\r\n            </properties>\r\n          </component>\r\n          <component id=\"9f290\" class=\"javax.swing.JTextField\" binding=\"txtFldTelefono\">\r\n            <constraints>\r\n              <grid row=\"3\" column=\"2\" row-span=\"1\" col-span=\"1\" vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"9\" fill=\"1\" indent=\"0\" use-parent-layout=\"false\">\r\n                <preferred-size width=\"150\" height=\"-1\"/>\r\n              </grid>\r\n            </constraints>\r\n            <properties>\r\n              <editable value=\"true\"/>\r\n            </properties>\r\n          </component>\r\n          <component id=\"7ae3c\" class=\"javax.swing.JLabel\">\r\n            <constraints>\r\n              <grid row=\"4\" column=\"1\" row-span=\"1\" col-span=\"1\" vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"4\" fill=\"0\" indent=\"0\" use-parent-layout=\"false\"/>\r\n            </constraints>\r\n            <properties>\r\n              <foreground color=\"-16777216\"/>\r\n              <text value=\"DEPARTAMENTO:\"/>\r\n            </properties>\r\n          </component>\r\n          <component id=\"71b9d\" class=\"javax.swing.JTextField\" binding=\"txtFldDepartamento\">\r\n            <constraints>\r\n              <grid row=\"4\" column=\"2\" row-span=\"1\" col-span=\"1\" vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" indent=\"0\" use-parent-layout=\"false\">\r\n                <preferred-size width=\"150\" height=\"-1\"/>\r\n              </grid>\r\n            </constraints>\r\n            <properties>\r\n              <editable value=\"true\"/>\r\n            </properties>\r\n          </component>\r\n          <component id=\"67e99\" class=\"javax.swing.JButton\" binding=\"confirmarButton\" default-binding=\"true\">\r\n            <constraints>\r\n              <grid row=\"4\" column=\"5\" row-span=\"1\" col-span=\"1\" vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"0\" fill=\"0\" indent=\"0\" use-parent-layout=\"false\"/>\r\n            </constraints>\r\n            <properties>\r\n              <text value=\"Confirmar\"/>\r\n            </properties>\r\n          </component>\r\n          <component id=\"8b259\" class=\"javax.swing.JTextField\" binding=\"txtFldCodigo\">\r\n            <constraints>\r\n              <grid row=\"1\" column=\"2\" row-span=\"1\" col-span=\"1\" vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" indent=\"0\" use-parent-layout=\"false\">\r\n                <preferred-size width=\"150\" height=\"-1\"/>\r\n              </grid>\r\n            </constraints>\r\n            <properties>\r\n              <editable value=\"true\"/>\r\n            </properties>\r\n          </component>\r\n          <component id=\"a19d8\" class=\"javax.swing.JLabel\">\r\n            <constraints>\r\n              <grid row=\"1\" column=\"1\" row-span=\"1\" col-span=\"1\" vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"4\" fill=\"0\" indent=\"0\" use-parent-layout=\"false\"/>\r\n            </constraints>\r\n            <properties>\r\n              <foreground color=\"-16777216\"/>\r\n              <text value=\"Código:\"/>\r\n            </properties>\r\n          </component>\r\n          <component id=\"cb963\" class=\"javax.swing.JButton\" binding=\"cancelarButton\" default-binding=\"true\">\r\n            <constraints>\r\n              <grid row=\"4\" column=\"4\" row-span=\"1\" col-span=\"1\" vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"0\" fill=\"0\" indent=\"0\" use-parent-layout=\"false\"/>\r\n            </constraints>\r\n            <properties>\r\n              <text value=\"Cancelar\"/>\r\n            </properties>\r\n          </component>\r\n        </children>\r\n      </grid>\r\n      <scrollpane id=\"5e12d\" binding=\"scrollPanel\">\r\n        <constraints>\r\n          <grid row=\"1\" column=\"1\" row-span=\"1\" col-span=\"1\" vsize-policy=\"7\" hsize-policy=\"7\" anchor=\"0\" fill=\"3\" indent=\"0\" use-parent-layout=\"false\"/>\r\n        </constraints>\r\n        <properties>\r\n          <background color=\"-2960686\"/>\r\n        </properties>\r\n        <border type=\"none\"/>\r\n        <children>\r\n          <component id=\"28723\" class=\"javax.swing.JTable\" binding=\"tableEmpleados\">\r\n            <constraints/>\r\n            <properties>\r\n              <background color=\"-2960686\"/>\r\n              <foreground color=\"-16777216\"/>\r\n              <gridColor color=\"-16777216\"/>\r\n            </properties>\r\n            <clientProperties>\r\n              <Table.isFileList class=\"java.lang.Boolean\" value=\"false\"/>\r\n            </clientProperties>\r\n          </component>\r\n        </children>\r\n      </scrollpane>\r\n      <hspacer id=\"b855b\">\r\n        <constraints>\r\n          <grid row=\"0\" column=\"2\" row-span=\"1\" col-span=\"1\" vsize-policy=\"1\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\" indent=\"0\" use-parent-layout=\"false\"/>\r\n        </constraints>\r\n      </hspacer>\r\n      <hspacer id=\"fff08\">\r\n        <constraints>\r\n          <grid row=\"0\" column=\"0\" row-span=\"1\" col-span=\"1\" vsize-policy=\"1\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\" indent=\"0\" use-parent-layout=\"false\"/>\r\n        </constraints>\r\n      </hspacer>\r\n    </children>\r\n  </grid>\r\n</form>\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/ListarEmpleados.form b/src/ListarEmpleados.form
+--- a/src/ListarEmpleados.form	(revision 54939cb14a3ccb1a1dc938355f7c59a2d2e999f3)
++++ b/src/ListarEmpleados.form	(date 1685691849863)
+@@ -3,7 +3,7 @@
+   <grid id="27dc6" binding="panelPrincipal" layout-manager="GridLayoutManager" row-count="2" column-count="3" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
+     <margin top="0" left="0" bottom="0" right="0"/>
+     <constraints>
+-      <xy x="20" y="20" width="631" height="439"/>
++      <xy x="20" y="20" width="643" height="439"/>
+     </constraints>
+     <properties>
+       <background color="-2960686"/>
Index: src/Usuario_bd.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Usuario_bd.java b/src/Usuario_bd.java
new file mode 100644
--- /dev/null	
+++ b/src/Usuario_bd.java	
@@ -0,0 +1,55 @@
+public class Usuario_bd {
+    private String user_name;
+    private String pass;
+    private String rol;
+
+    /**
+     * Constructor de la Class.
+     *
+     * @param user_name Nombre del usuario.
+     * @param pass Contraseña del usuario.
+     * @param rol Rol del usuario.
+     */
+    public Usuario_bd(String user_name, String pass, String rol) {
+        this.user_name = user_name;
+        this.pass = pass;
+        this.rol = rol;
+    }
+
+    /**
+     * Getter del nombre del usuario.
+     *
+     * @return String.
+     */
+    public String getUser_name() {
+        return user_name;
+    }
+
+    /**
+     * Getter de la contraseña del usuario.
+     *
+     * @return String
+     */
+    public String getPass() {
+        return pass;
+    }
+
+    /**
+     * Getter del rol del usuario.
+     *
+     * @return String.
+     */
+    public String getRol() {
+        return rol;
+    }
+
+    /**
+     * To String del usuario.
+     *
+     * @return String con formato nombre;contraseña;rol.
+     */
+    @Override
+    public String toString() {
+        return user_name + ";" + pass + ";" + rol;
+    }
+}
Index: src/DBEmpleados.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DBEmpleados.java b/src/DBEmpleados.java
new file mode 100644
--- /dev/null	
+++ b/src/DBEmpleados.java	
@@ -0,0 +1,46 @@
+import java.sql.ResultSet;
+
+public class DBEmpleados extends DBManager{
+
+    private static final String DB_EMP = "dbo.empleado";
+    private static final String DB_EMP_LIMITED = "dbo.informacionLimitadaEmpleado";
+    private static final String SELECT_EMPLEADOS = "SELECT * FROM " + DB_EMP;
+    private static final String SELECT_EMPLEADO = SELECT_EMPLEADOS + " WHERE codigo = ";
+    private static final String SELECT_EMPLEADOS_LIMITADO = "SELECT * FROM " + DB_EMP_LIMITED;
+
+    /**
+     * Constructor que implementa DBManager.
+     */
+    public DBEmpleados() {
+        super(UserManager.user.getUser_name(), UserManager.user.getPass());
+    }
+
+    /**
+     * Función que devuelve un empleado especifico.
+     *
+     * @param codigo codigo del empleado.
+     * @return ResultSet con todos los datos del empleado (Solo lectura).
+     */
+    public ResultSet verEmpleado(int codigo){
+        return verSelect(SELECT_EMPLEADO + codigo);
+    }
+
+    /**
+     * Función que devuelve un empleado especifico.
+     *
+     * @param codigo codigo del empleado.
+     * @return ResultSet con todos los datos del empleado (Editable).
+     */
+    public ResultSet editEmpleado(int codigo){
+        return getSelect(SELECT_EMPLEADO + codigo);
+    }
+
+    /**
+     * Función que lista el codigo, el nif y el nombre completo de todos los empleados.
+     *
+     * @return ResultSet con los datos de todos los empleados.
+     */
+    public ResultSet listarEmpleadosLimitado(){
+        return verSelect(SELECT_EMPLEADOS_LIMITADO);
+    }
+}
Index: src/UserManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/UserManager.java b/src/UserManager.java
new file mode 100644
--- /dev/null	
+++ b/src/UserManager.java	
@@ -0,0 +1,76 @@
+import java.io.File;
+import java.io.BufferedReader;
+import java.io.FileWriter;
+import java.io.FileReader;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+
+/**
+ * Class que se encarga de gestionar la sessión del usuario.
+ */
+public class UserManager {
+
+    public static File userSessionFile = new File("cache/usr.txt");
+    public static Usuario_bd user;
+
+    /**
+     * Función que comprueba si hay una sessión almacenada.
+     *
+     * @return boolean Devuelve true si existe una session y false en caso contrario.
+     */
+    public static boolean hasSession(){
+        return userSessionFile.exists();
+    }
+
+    /**
+     * Función que se encarga de cargar la sessión almacenada.
+     *
+     * @return boolean Devuelve true si ha conseguido cargar el usuario y false en el caso contrario.
+     */
+    public static boolean loadSession() {
+        try {
+            BufferedReader rd = new BufferedReader(new FileReader(userSessionFile));
+            String line = "";
+            while ((line = rd.readLine()) != null){
+                String[] lineSplit = line.split(";");
+                user = new Usuario_bd(lineSplit[0], lineSplit[1], lineSplit[2]);
+            }
+            rd.close();
+            return true;
+        }catch (FileNotFoundException e){
+            System.err.println(e.getMessage());
+            return false;
+        } catch (IOException e) {
+            e.printStackTrace();
+            return false;
+        }
+    }
+
+    /**
+     * Función que se encaga de guardar la sessión del usuario.
+     *
+     * @return boolean Devuelve true si lo ha conseguido guardar y false en caso de que no lo consigue almacenar.
+     */
+
+    public static boolean saveSession(){
+        try {
+            FileWriter wr = new FileWriter(userSessionFile);
+            wr.write(user.toString());
+            wr.close();
+            return true;
+        } catch (IOException e) {
+            return false;
+        }
+    }
+
+    /**
+     * Función que se encarga de eliminar la sessión almacenada.
+     *
+     * @return boolean Devuelve true si lo consigue eliminar y false en caso contrario.
+     */
+
+    public static boolean exitSession(){
+        user = null;
+        return userSessionFile.delete();
+    }
+}
Index: MarcosTVProgramacion.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\r\n    <exclude-output />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MarcosTVProgramacion.iml b/MarcosTVProgramacion.iml
--- a/MarcosTVProgramacion.iml	
+++ b/MarcosTVProgramacion.iml	
@@ -7,5 +7,22 @@
     </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="module-library">
+      <library name="JUnit5.8.1">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.8.1/junit-jupiter-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.8.1/junit-jupiter-api-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.8.1/junit-platform-commons-1.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.8.1/junit-jupiter-params-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.8.1/junit-jupiter-engine-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.8.1/junit-platform-engine-1.8.1.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+    <orderEntry type="library" name="mssql-jdbc-12.2.0.jre11" level="project" />
   </component>
 </module>
\ No newline at end of file
Index: src/Utilitis.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Utilitis.java b/src/Utilitis.java
new file mode 100644
--- /dev/null	
+++ b/src/Utilitis.java	
@@ -0,0 +1,112 @@
+import javax.swing.*;
+import javax.swing.table.DefaultTableCellRenderer;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
+public class Utilitis {
+
+    private static final int ROW_INTERVALS = 16;
+
+    /**
+     * Centra todas las celdas de un JTable.
+     *
+     * @param table tabla que se desea centrar.
+     */
+    public static void centerTable(JTable table) {
+        DefaultTableCellRenderer centerCell = new DefaultTableCellRenderer();
+        centerCell.setHorizontalAlignment(JLabel.CENTER);
+        for (int i = 0; i < table.getColumnModel().getColumnCount(); i++) {
+            table.getColumnModel().getColumn(i).setCellRenderer(centerCell);
+        }
+    }
+
+    /**
+     * Función que elimina las filas vacias.
+     *
+     * @param data Datos que deseas
+     * @return
+     */
+    private static String[][] deleteNulls(String[][] data) {
+        int count = 0;
+        for (String[] strings : data) {
+            if (strings[0] != null) {
+                count++;
+            }
+        }
+        String[][] result = new String[count][data[0].length];
+        count = 0;
+        for (String[] datum : data) {
+            if (datum[0] != null) {
+                System.arraycopy(datum, 0, result[count], 0, datum.length);
+                count++;
+            }
+        }
+        return result;
+    }
+
+    /**
+     * Función que convierte un ResultSet en una matríz de String.
+     *
+     * @param rs ResultSet a convertir.
+     * @param cantidadColumnas La cantidad de columnas que desea convertir.
+     * @return String[][] devuelve los datos del ResultSet.
+     */
+    public static String[][] getDataFromResultSet(ResultSet rs, int cantidadColumnas) {
+        try {
+            String[][] result = new String[rs.getFetchSize()][cantidadColumnas];
+            int count = 0;
+            while (rs.next()) {
+                if (result[count] != null) {
+                    for (int i = 0; i < cantidadColumnas; i++) {
+                        result[count][i] = rs.getString(i);
+                    }
+                }
+                count++;
+            }
+            return deleteNulls(result);
+        } catch (SQLException e) {
+            e.printStackTrace();
+            return null;
+        }
+    }
+
+    /**
+     * Función que convierte un ResultSet en una matríz de String.
+     *
+     * @param rs ResultSet a convertir.
+     * @param columnas Las columnas que desea convertir.
+     * @return String[][] devuelve los datos del ResultSet.
+     */
+    public static String[][] getDataFromResultSet(ResultSet rs, String[] columnas) {
+        try {
+            String[][] result = new String[rs.getFetchSize()][columnas.length];
+            int count = 0;
+            while (rs.next()) {
+                if (result[count] != null) {
+                    for (int i = 0; i < columnas.length; i++) {
+                        result[count][i] = rs.getString(columnas[i]);
+                    }
+                }
+                count++;
+            }
+            return deleteNulls(result);
+        } catch (SQLException e) {
+            e.printStackTrace();
+            return null;
+        }
+    }
+
+    /**
+     * Función que devuelve el contenido de una celda de un JTable.
+     *
+     * @param table JTable que deseas sacar información.
+     * @param columna Número de columna que deseas sacar.
+     * @param rowY Número Y de la row (AcctionLisener e.getChild().getY())
+     *
+     * @return String con el contenido de la celda.
+     */
+    private String getCell(JTable table, int columna, int rowY) {
+        int rowLine = rowY / ROW_INTERVALS;
+        return (String) table.getValueAt(rowLine, columna);
+    }
+}
Index: src/DBManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DBManager.java b/src/DBManager.java
new file mode 100644
--- /dev/null	
+++ b/src/DBManager.java	
@@ -0,0 +1,107 @@
+import java.sql.*;
+
+public abstract class DBManager {
+
+    private static Connection conn = null;
+
+    // Configuración de la conexión a la base de datos
+    //private static final String DB_HOST = "192.168.7.208\\SQLEXPRESS";
+    private static final String DB_HOST = "DESKTOP-00LQ1SJ\\SQLEXPRESS";
+    private static final String DB_NAME = "databaseName=MARCOSTV";
+    private static final String DB_PORT = "1433";
+    private static final String DB_TRUST_SERVER = "TrustServerCertificate=true";
+    private static final String DB_URL = "jdbc:sqlserver://"+ DB_HOST + ":" + DB_PORT +";" + DB_TRUST_SERVER + ";" + DB_NAME;
+
+
+    // Configuración del usuario de la base de datos
+
+    private static String user;
+    private static String pass;
+
+    // Configuración de mensajes de respuesta
+    private static final String DB_MSQ_CONN_OK = "CONEXIÓN CORRECTA";
+    private static final String DB_MSQ_CONN_NO = "ERROR EN LA CONEXIÓN";
+
+    /**
+     * Función para cargar el driver de SQL Server.
+     *
+     * @return boolean Devuelve true si consigue cargarlo y false si no lo consigue.
+     */
+    public static boolean loadDriver(){
+        try{
+            System.out.print("Cargando Driver...");
+            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver").newInstance();
+            System.out.println(" OK!");
+            return true;
+        } catch (Exception e){
+            e.printStackTrace();
+            return false;
+        }
+    }
+
+    /**
+     * Función que se encarga de conectar con la base de datos.
+     *
+     * @return boolean Devuelve true si se ha realizado la conexión con exito y false en caso contrario.
+     */
+    public static boolean connect() {
+        try {
+            System.out.print("Conectando a la base de datos... ");
+            conn = DriverManager.getConnection(DB_URL, user, pass);
+            System.out.println(DB_MSQ_CONN_OK);
+            return true;
+        } catch (SQLException ex) {
+            ex.printStackTrace();
+            System.out.println(DB_MSQ_CONN_NO);
+            return false;
+        }
+    }
+
+    /**
+     * Constructor para implementar en las class que lo extienden.
+     *
+     * @param user Se pasa el nombre del usuario con el que se conecta a la base de datos.
+     * @param pass Se pasa la contraseña del usuario con el que se conecta a la base de datos.
+     */
+
+    public DBManager(String user, String pass){
+        DBManager.user = user;
+        DBManager.pass = pass;
+        loadDriver();
+        connect();
+    }
+
+    /**
+     * Función que realiza un SELECT (SOLO LECTURA).
+     *
+     * @param select select que deseas realizar.
+     * @return ResultSet con los datos devueltos de la base de datos (SOLO LECTURA).
+     */
+    public ResultSet verSelect(String select){
+        try{
+            Statement st = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
+            ResultSet rs = st.executeQuery(select);
+            return rs;
+        }catch (SQLException e){
+            e.printStackTrace();
+            return null;
+        }
+    }
+
+    /**
+     * Función que realiza un SELECT (EDITABLE).
+     *
+     * @param select select que deseas realizar.
+     * @return ResultSet con los datos devueltos de la base de datos (EDITABLE).
+     */
+    public ResultSet getSelect(String select){
+        try{
+            Statement st = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
+            ResultSet rs = st.executeQuery(select);
+            return rs;
+        }catch (SQLException e){
+            e.printStackTrace();
+            return null;
+        }
+    }
+}
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/azureactivedirectoryauthentication/AzureActiveDirectoryAuthentication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/azureactivedirectoryauthentication/AzureActiveDirectoryAuthentication.java b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/azureactivedirectoryauthentication/AzureActiveDirectoryAuthentication.java
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/azureactivedirectoryauthentication/AzureActiveDirectoryAuthentication.java	
@@ -0,0 +1,111 @@
+/*=====================================================================
+File: 	 AzureActiveDirectoryAuthentication.java
+Summary: This Microsoft JDBC Driver for SQL Server sample application
+         demonstrates how to establidh secure connection to Azure Database, 
+		 Azure Data Warehouse and any other cloud database.
+		 
+		 Users can use 'ActiveDirectoryPassword' or 'ActiveDirectoryIntegrated' 
+		 Authentication modes as per their needs. This test can be used to 
+		 establish connection by both modes on any operating system, if required 
+		 setup is provided for Active Directory Integrated Authentication.
+		 
+		 For testing 'ActiveDirectoryIntegrated' Authentication, do one of 
+		 the following:
+           1. Generate Kerberos Ticket and validate its availability with klist tool
+           2. Place sqljdbc_auth.dll in the same directory as the pom.xml file. 
+              (Only applicable for Windows OS)
+			  
+		 For testing 'ActiveDirectoryPassword' Authentication, none of the above 
+		 setup is required.
+
+---------------------------------------------------------------------
+This file is part of the Microsoft JDBC Driver for SQL Server Code Samples.
+Copyright (C) Microsoft Corporation.  All rights reserved.
+ 
+This source code is intended only as a supplement to Microsoft
+Development Tools and/or on-line documentation.  See these other
+materials for detailed information regarding Microsoft code samples.
+ 
+THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF
+ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
+PARTICULAR PURPOSE.
+=====================================================================*/
+
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.sql.Connection;
+import java.sql.ResultSet;
+import java.sql.Statement;
+
+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;
+
+
+public class AzureActiveDirectoryAuthentication {
+
+    public static void main(String[] args) {
+
+        String serverName = null;
+        String portNumber = null;
+        String databaseName = null;
+        String username = null;
+        String password = null;
+        String authentication = null;
+        String hostNameInCertificate = null;
+
+        try (InputStreamReader in = new InputStreamReader(System.in); BufferedReader br = new BufferedReader(in)) {
+
+            System.out.println("For testing 'ActiveDirectoryIntegrated' Authentication, do one of the following:");
+            System.out.println("   1. Generate Kerberos Ticket and validate its availability with klist tool, or");
+            System.out.println("   2. Place sqljdbc_auth.dll in the same directory as the pom.xml file.");
+            System.out.println(
+                    "For testing 'ActiveDirectoryPassword' Authentication, none of the above setup is not required.");//
+            System.out.println();
+
+            // Start capturing database info
+            System.out.print("Enter server name: ");
+            serverName = br.readLine();
+            System.out.print("Enter port number: ");
+            portNumber = br.readLine();
+            System.out.print("Enter database name: ");
+            databaseName = br.readLine();
+            System.out.print("Enter username: ");
+            username = br.readLine();
+            System.out.print("Enter password: ");
+            password = br.readLine();
+            System.out.print("Enter authentication: "); // e.g. ActiveDirectoryPassword / ActiveDirectoryIntegrated
+            authentication = br.readLine();
+            System.out.print("Enter host name in certificate: "); // e.g. *.database.windows.net
+            hostNameInCertificate = br.readLine();
+
+            // Establish the connection.
+            SQLServerDataSource ds = new SQLServerDataSource();
+            ds.setServerName(serverName);
+            ds.setPortNumber(Integer.parseInt(portNumber));
+            ds.setDatabaseName(databaseName);
+            ds.setUser(username);
+            ds.setPassword(password);
+            ds.setAuthentication(authentication);
+            ds.setHostNameInCertificate(hostNameInCertificate);
+
+            try (Connection con = ds.getConnection(); Statement stmt = con.createStatement();) {
+                System.out.println();
+                System.out.println("Connection established successfully.");
+
+                // Create and execute an SQL statement that returns user name.
+                String SQL = "SELECT SUSER_SNAME()";
+                try (ResultSet rs = stmt.executeQuery(SQL)) {
+
+                    // Iterate through the data in the result set and display it.
+                    while (rs.next()) {
+                        System.out.println("user name: " + rs.getString(1));
+                    }
+                }
+            }
+        }
+        // Handle any errors that may have occurred.
+        catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+}
Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        JFrame frame = new JFrame(\"inicioSesion\");\r\n        frame.setContentPane(new inicioSesion().JPanelprincipalInicioSesion);\r\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        frame.pack();\r\n        frame.setVisible(true);\r\n        frame.setSize(700,500);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
--- a/src/Main.java	
+++ b/src/Main.java	
@@ -1,12 +1,5 @@
-import javax.swing.*;
-
 public class Main {
     public static void main(String[] args) {
-        JFrame frame = new JFrame("inicioSesion");
-        frame.setContentPane(new inicioSesion().JPanelprincipalInicioSesion);
-        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-        frame.pack();
-        frame.setVisible(true);
-        frame.setSize(700,500);
+
     }
 }
\ No newline at end of file
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/dataclassification/DataDiscoveryAndClassification.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/dataclassification/DataDiscoveryAndClassification.java b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/dataclassification/DataDiscoveryAndClassification.java
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/dataclassification/DataDiscoveryAndClassification.java	
@@ -0,0 +1,169 @@
+/*=====================================================================
+File: 	 ExecuteStoredProcedures.java
+Summary: This Microsoft JDBC Driver for SQL Server sample application 
+         that demonstrates how to extract 'SQL Data Discovery and 
+		 Classification' information from ResultSet.
+---------------------------------------------------------------------
+This file is part of the Microsoft JDBC Driver for SQL Server Code Samples.
+Copyright (C) Microsoft Corporation.  All rights reserved.
+ 
+This source code is intended only as a supplement to Microsoft
+Development Tools and/or on-line documentation.  See these other
+materials for detailed information regarding Microsoft code samples.
+ 
+THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF
+ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
+PARTICULAR PURPOSE.
+=====================================================================*/
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import com.microsoft.sqlserver.jdbc.SQLServerResultSet;
+import com.microsoft.sqlserver.jdbc.dataclassification.SensitivityProperty;
+
+
+/**
+ * SQL Server feature documentation reference:
+ * https://docs.microsoft.com/en-us/sql/relational-databases/security/sql-data-discovery-and-classification?view=sql-server-2017
+ */
+public class DataDiscoveryAndClassification {
+
+    private static boolean featureSupported = false;
+
+    public static void main(String[] args) {
+
+        // Provides table name to be used for running test.
+        String tableName = "JDBC_SQL_DATA_DISCOVERY_CLASSIFICATION";
+
+        // Create a variable for the connection string.
+		String connectionUrl = "jdbc:sqlserver://<server>:<port>;databaseName=<database>;username=<user>;password=<password>;";
+
+        // Establish the connection.
+        try (Connection con = DriverManager.getConnection(connectionUrl); Statement stmt = con.createStatement()) {
+            verifySupportability(stmt);
+            if (featureSupported) {
+                createTable(stmt, tableName);
+                runTests(stmt, tableName);
+                drop_table(stmt, tableName);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    /**
+     * Verifies if SQL Discovery and Classification feature is applicable on target server.
+     * 
+     * @param stmt
+     *        Statement object to work with
+     */
+    private static void verifySupportability(Statement stmt) {
+        try {
+            stmt.execute("SELECT * FROM SYS.SENSITIVITY_CLASSIFICATIONS");
+            featureSupported = true;
+        } catch (SQLException e) {
+            // Error Code 208 : Object Not Found
+            if (e.getErrorCode() == 208) {
+                featureSupported = false;
+                System.err.println("This feature is not supported on the target SQL Server.");
+            }
+        }
+    }
+
+    /**
+     * Creates table for the test and sets tags for Sensitivity Classification
+     * 
+     * @param stmt
+     *        Statement to work with
+     * @param tableName
+     *        Table to be created
+     * @throws SQLException
+     *         If an exception occurs
+     */
+    private static void createTable(Statement stmt, String tableName) throws SQLException {
+        // Creates table for storing Supplier data
+        stmt.execute("CREATE TABLE " + tableName + " (" + "[Id] [int] IDENTITY(1,1) NOT NULL,"
+                + "[CompanyName] [nvarchar](40) NOT NULL," + "[ContactName] [nvarchar](50) NULL,"
+                + "[ContactTitle] [nvarchar](40) NULL," + "[City] [nvarchar](40) NULL,"
+                + "[Country] [nvarchar](40) NULL," + "[Phone] [nvarchar](30) MASKED WITH (FUNCTION = 'default()') NULL,"
+                + "[Fax] [nvarchar](30) MASKED WITH (FUNCTION = 'default()') NULL," + "CONSTRAINT [PK_" + tableName
+                + "] PRIMARY KEY CLUSTERED" + "([Id] ASC "
+                + ")WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]" + ") ON [PRIMARY]");
+
+        // Set Sensitivity Classification tags to table columns
+        stmt.execute("ADD SENSITIVITY CLASSIFICATION TO " + tableName
+                + ".CompanyName WITH (LABEL='PII', LABEL_ID='L1', INFORMATION_TYPE='Company name', INFORMATION_TYPE_ID='COMPANY')");
+        stmt.execute("ADD SENSITIVITY CLASSIFICATION TO " + tableName
+                + ".ContactName WITH (LABEL='PII', LABEL_ID='L1', INFORMATION_TYPE='Person name', INFORMATION_TYPE_ID='NAME')");
+        stmt.execute("ADD SENSITIVITY CLASSIFICATION TO " + tableName
+                + ".Phone WITH (LABEL='PII', LABEL_ID='L1', INFORMATION_TYPE='Contact Information', INFORMATION_TYPE_ID='CONTACT')");
+        stmt.execute("ADD SENSITIVITY CLASSIFICATION TO " + tableName
+                + ".Fax WITH (LABEL='PII', LABEL_ID='L1', INFORMATION_TYPE='Contact Information', INFORMATION_TYPE_ID='CONTACT')");
+    }
+
+    /**
+     * Runs query to fetch ResultSet from target table
+     * 
+     * @param stmt
+     *        Statement to work with
+     * @param tableName
+     *        Name of table to fetch results from
+     * @throws SQLException
+     *         If an exception occurs
+     */
+    private static void runTests(Statement stmt, String tableName) throws SQLException {
+        String query = "SELECT * FROM " + tableName;
+        try (SQLServerResultSet rs = (SQLServerResultSet) stmt.executeQuery(query)) {
+            printSensitivityClassification(rs);
+        }
+    }
+
+    /**
+     * Prints Sensitivity Classification data as received in ResultSet
+     * 
+     * @param rs
+     *        Active ResultSet to read data from
+     * @throws SQLException
+     *         If an exception occurs
+     */
+    private static void printSensitivityClassification(SQLServerResultSet rs) throws SQLException {
+        if (null != rs.getSensitivityClassification()) {
+            for (int columnPos = 0; columnPos < rs.getSensitivityClassification().getColumnSensitivities().size();
+                    columnPos++) {
+                for (SensitivityProperty sp : rs.getSensitivityClassification().getColumnSensitivities().get(columnPos)
+                        .getSensitivityProperties()) {
+                    if (sp.getLabel() != null) {
+                        System.out.println("Labels received for Column : " + columnPos);
+                        System.out.println("Label ID: " + sp.getLabel().getId());
+                        System.out.println("Label Name: " + sp.getLabel().getName());
+                        System.out.println();
+                    }
+
+                    if (sp.getInformationType() != null) {
+                        System.out.println("Information Types received for Column : " + columnPos);
+                        System.out.println("Information Type ID: " + sp.getInformationType().getId());
+                        System.out.println("Information Type Name: " + sp.getInformationType().getName());
+                        System.out.println();
+                    }
+                }
+            }
+        }
+    }
+
+    /**
+     * Drops the table created for test
+     * 
+     * @param stmt
+     *        Statement to work with
+     * @param tableName
+     *        Table Name to be used
+     * @throws SQLException
+     *         If an exception occurs
+     */
+    private static void drop_table(Statement stmt, String tableName) throws SQLException {
+        stmt.execute("DROP TABLE " + tableName);
+    }
+}
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/alwaysencrypted/AlwaysEncrypted.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/alwaysencrypted/AlwaysEncrypted.java b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/alwaysencrypted/AlwaysEncrypted.java
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/alwaysencrypted/AlwaysEncrypted.java	
@@ -0,0 +1,179 @@
+/*=====================================================================
+File: 	 AlwaysEncrypted.java
+Summary: This Microsoft JDBC Driver for SQL Server sample application
+         demonstrates how to create Column Master Key and Column Encryption Key for use 
+		 with the Java Key Store for Always Encrypted feature.
+
+---------------------------------------------------------------------
+This file is part of the Microsoft JDBC Driver for SQL Server Code Samples.
+Copyright (C) Microsoft Corporation.  All rights reserved.
+ 
+This source code is intended only as a supplement to Microsoft
+Development Tools and/or on-line documentation.  See these other
+materials for detailed information regarding Microsoft code samples.
+ 
+THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF
+ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
+PARTICULAR PURPOSE.
+=====================================================================*/
+
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import com.microsoft.sqlserver.jdbc.SQLServerColumnEncryptionJavaKeyStoreProvider;
+import com.microsoft.sqlserver.jdbc.SQLServerColumnEncryptionKeyStoreProvider;
+import com.microsoft.sqlserver.jdbc.SQLServerException;
+
+
+public class AlwaysEncrypted {
+    // Alias of the key stored in the keystore.
+    private static String keyAlias = null;
+
+    // Name by which the column master key will be known in the database.
+    private static String columnMasterKeyName = "JDBC_CMK";
+
+    // Name by which the column encryption key will be known in the database.
+    private static String columnEncryptionKey = "JDBC_CEK";
+
+    // The location of the keystore.
+    private static String keyStoreLocation = null;
+
+    // The password of the keystore and the key.
+    private static char[] keyStoreSecret = null;
+
+    /**
+     * Name of the encryption algorithm used to encrypt the value of the column encryption key. The algorithm for the
+     * system providers must be RSA_OAEP.
+     */
+    private static String algorithm = "RSA_OAEP";
+
+    public static void main(String[] args) {
+
+        String serverName = null;
+        String portNumber = null;
+        String databaseName = null;
+        String username = null;
+        String password = null;
+
+        try (InputStreamReader in = new InputStreamReader(System.in); BufferedReader br = new BufferedReader(in)) {
+            System.out.print("Enter server name: ");
+            serverName = br.readLine();
+            System.out.print("Enter port number: ");
+            portNumber = br.readLine();
+            System.out.print("Enter database name: ");
+            databaseName = br.readLine();
+            System.out.print("Enter username: ");
+            username = br.readLine();
+            System.out.print("Enter password: ");
+            password = br.readLine();
+
+            System.out.print("Enter the location of the keystore: ");
+            // e.g. C:\\Dev\\Always Encrypted\\keystore.jks
+            keyStoreLocation = br.readLine();
+
+            System.out.print("Enter the alias of the key stored in the keystore: ");
+            // e.g. lp-e796acea-c3bd-4a27-b657-2bb71e3517d1
+            keyAlias = br.readLine();
+
+            System.out.print("Enter the password of the keystore and the key: ");
+            // <Secret of key Store>
+            keyStoreSecret = br.readLine().toCharArray();
+
+            String connectionUrl = "jdbc:sqlserver://" + serverName + ":" + portNumber + ";" + "databaseName="
+                    + databaseName + ";username=" + username + ";password=" + password + ";";
+
+            // Open a connection to the database.
+            try (Connection connection = DriverManager.getConnection(connectionUrl);
+                    Statement stmt = connection.createStatement()) {
+                // Instantiate the Java Key Store provider.
+                SQLServerColumnEncryptionKeyStoreProvider storeProvider = new SQLServerColumnEncryptionJavaKeyStoreProvider(
+                        keyStoreLocation, keyStoreSecret);
+
+                dropKeys(stmt);
+
+                System.out.println();
+
+                /**
+                 * Create column mater key For details on syntax refer: https://msdn.microsoft.com/library/mt146393.aspx
+                 * 
+                 */
+                String createCMKSQL = "CREATE COLUMN MASTER KEY " + columnMasterKeyName + " WITH ( "
+                        + " KEY_STORE_PROVIDER_NAME = '" + storeProvider.getName() + "' , KEY_PATH =  '" + keyAlias
+                        + "' ) ";
+
+                stmt.executeUpdate(createCMKSQL);
+                System.out.println("Column Master Key created with name : " + columnMasterKeyName);
+
+                byte[] encryptedCEK = getEncryptedCEK(storeProvider);
+
+                /**
+                 * Create column encryption key For more details on the syntax refer:
+                 * https://msdn.microsoft.com/library/mt146372.aspx Encrypted CEK first needs to be converted into
+                 * varbinary_literal from bytes, for which DatatypeConverter.printHexBinary is used
+                 */
+                String createCEKSQL = "CREATE COLUMN ENCRYPTION KEY " + columnEncryptionKey + " WITH VALUES ( "
+                        + " COLUMN_MASTER_KEY = " + columnMasterKeyName + " , ALGORITHM =  '" + algorithm
+                        + "' , ENCRYPTED_VALUE =  0x" + bytesToHexString(encryptedCEK, encryptedCEK.length) + " ) ";
+
+                stmt.executeUpdate(createCEKSQL);
+                System.out.println("CEK created with name : " + columnEncryptionKey);
+            }
+        } catch (Exception e) {
+            // Handle any errors that may have occurred.
+            e.printStackTrace();
+        }
+    }
+
+    /**
+     * 
+     * @param b
+     *        byte value
+     * @param length
+     *        length of the array
+     * @return
+     */
+    final static char[] hexChars = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
+
+    private static String bytesToHexString(byte[] b, int length) {
+        StringBuilder sb = new StringBuilder(length * 2);
+        for (int i = 0; i < length; i++) {
+            int hexVal = b[i] & 0xFF;
+            sb.append(hexChars[(hexVal & 0xF0) >> 4]);
+            sb.append(hexChars[(hexVal & 0x0F)]);
+        }
+        return sb.toString();
+    }
+
+    private static byte[] getEncryptedCEK(
+            SQLServerColumnEncryptionKeyStoreProvider storeProvider) throws SQLServerException {
+        /**
+         * Following arguments needed by SQLServerColumnEncryptionJavaKeyStoreProvider 1) keyStoreLocation : Path where
+         * keystore is located, including the keystore file name. 2) keyStoreSecret : Password of the keystore and the
+         * key.
+         */
+        String plainTextKey = "You need to give your plain text";
+
+        // plainTextKey has to be 32 bytes with current algorithm supported
+        byte[] plainCEK = plainTextKey.getBytes();
+
+        // This will give us encrypted column encryption key in bytes
+        byte[] encryptedCEK = storeProvider.encryptColumnEncryptionKey(keyAlias, algorithm, plainCEK);
+
+        return encryptedCEK;
+    }
+
+    private static void dropKeys(Statement stmt) throws SQLException {
+        String cekSql = " if exists (SELECT name from sys.column_encryption_keys where name='" + columnEncryptionKey
+                + "')" + " begin" + " drop column encryption key " + columnEncryptionKey + " end";
+        stmt.execute(cekSql);
+
+        cekSql = " if exists (SELECT name from sys.column_master_keys where name='" + columnMasterKeyName + "')"
+                + " begin" + " drop column master key " + columnMasterKeyName + " end";
+        stmt.execute(cekSql);
+    }
+}
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/constrained/ConstrainedDelegation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/constrained/ConstrainedDelegation.java b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/constrained/ConstrainedDelegation.java
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/constrained/ConstrainedDelegation.java	
@@ -0,0 +1,175 @@
+/*=====================================================================
+File: 	 ConstrainedDelegation.java
+Summary: This Microsoft JDBC Driver for SQL Server sample application 
+         that demonstrates how to establish constrained delegation connection.
+         An intermediate service is necessary to impersonate the client. 
+		 This service needs to be configured with the options:
+		 1. "Trust this user for delegation to specified services only"
+		 2. "Use any authentication protocol"
+---------------------------------------------------------------------
+This file is part of the Microsoft JDBC Driver for SQL Server Code Samples.
+Copyright (C) Microsoft Corporation.  All rights reserved.
+ 
+This source code is intended only as a supplement to Microsoft
+Development Tools and/or on-line documentation.  See these other
+materials for detailed information regarding Microsoft code samples.
+ 
+THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF
+ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
+PARTICULAR PURPOSE.
+=====================================================================*/
+
+import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Properties;
+
+import javax.security.auth.Subject;
+import javax.security.auth.login.LoginException;
+import javax.security.auth.spi.LoginModule;
+
+import org.ietf.jgss.GSSCredential;
+import org.ietf.jgss.GSSException;
+import org.ietf.jgss.GSSManager;
+import org.ietf.jgss.GSSName;
+import org.ietf.jgss.Oid;
+
+import com.sun.security.auth.module.Krb5LoginModule;
+import com.sun.security.jgss.ExtendedGSSCredential;
+
+
+public class ConstrainedDelegation {
+
+    // Connection properties
+    private static final String CONNECTION_URI = "jdbc:sqlserver://<server>:<port>";
+
+    private static final String TARGET_USER_NAME = "User to be impersonated";
+
+    // Impersonation service properties
+    private static final String SERVICE_PRINCIPAL = "SPN";
+    private static final String KEYTAB_ROUTE = "<Route to Keytab file>";
+
+    private static final Properties driverProperties;
+    private static Oid krb5Oid;
+    private static final String KERBEROS_OID = "1.2.840.113554.1.2.2";
+
+    private static Subject serviceSubject;
+
+    static {
+
+        driverProperties = new Properties();
+        driverProperties.setProperty("integratedSecurity", "true");
+        driverProperties.setProperty("authenticationScheme", "JavaKerberos");
+
+        try {
+            krb5Oid = new Oid(KERBEROS_OID);
+        } catch (GSSException e) {
+            System.out.println("Error creating Oid: " + e);
+            System.exit(-1);
+        }
+    }
+
+    public static void main(String... args) throws Exception {
+        System.out.println("Service subject: " + doInitialLogin());
+
+        // Get impersonated user credentials thanks S4U2self mechanism
+        GSSCredential impersonatedUserCreds = impersonate();
+        System.out.println("Credentials for " + TARGET_USER_NAME + ": " + impersonatedUserCreds);
+
+        // Create a connection for target service thanks S4U2proxy mechanism
+        try (Connection con = createConnection(impersonatedUserCreds)) {
+            System.out.println("Connection succesfully: " + con);
+        }
+    }
+
+    /**
+     *
+     * Authenticate the intermediate server that is going to impersonate the client
+     *
+     * @return a subject for the intermediate server with the keytab credentials
+     * @throws PrivilegedActionException
+     *         in case of failure
+     */
+    private static Subject doInitialLogin() throws PrivilegedActionException {
+        serviceSubject = new Subject();
+
+        LoginModule krb5Module;
+        try {
+            krb5Module = (LoginModule) new Krb5LoginModule();
+        } catch (Exception e) {
+            System.out.print("Error loading Krb5LoginModule module: " + e);
+            throw new PrivilegedActionException(e);
+        }
+
+        System.setProperty("sun.security.krb5.debug", String.valueOf(true));
+
+        Map<String, String> options = new HashMap<>();
+        options.put("useKeyTab", "true");
+        options.put("storeKey", "true");
+        options.put("doNotPrompt", "true");
+        options.put("keyTab", KEYTAB_ROUTE);
+        options.put("principal", SERVICE_PRINCIPAL);
+        options.put("debug", "true");
+        options.put("isInitiator", "true");
+
+        Map<String, String> sharedState = new HashMap<>(0);
+
+        krb5Module.initialize(serviceSubject, null, sharedState, options);
+        try {
+            krb5Module.login();
+            krb5Module.commit();
+            krb5Module.logout();
+        } catch (LoginException e) {
+            System.out.print("Error authenticating with Kerberos: " + e);
+            try {
+                krb5Module.abort();
+            } catch (LoginException e1) {
+                System.out.print("Error aborting Kerberos authentication:  " + e1);
+                throw new PrivilegedActionException(e);
+            }
+            throw new PrivilegedActionException(e);
+        }
+        return serviceSubject;
+    }
+
+    /**
+     * Generate the impersonated user credentials thanks to the S4U2self mechanism
+     *
+     * @return the client impersonated GSSCredential
+     * @throws PrivilegedActionException
+     *         in case of failure
+     */
+    private static GSSCredential impersonate() throws PrivilegedActionException {
+        return Subject.doAs(serviceSubject, (PrivilegedExceptionAction<GSSCredential>) () -> {
+            GSSManager manager = GSSManager.getInstance();
+
+            GSSCredential self = manager.createCredential(null, GSSCredential.DEFAULT_LIFETIME, krb5Oid,
+                    GSSCredential.INITIATE_ONLY);
+            GSSName user = manager.createName(TARGET_USER_NAME, GSSName.NT_USER_NAME);
+            return ((ExtendedGSSCredential) self).impersonate(user);
+        });
+    }
+
+    /**
+     * Obtains a connection using an impersonated credential
+     *
+     * @param impersonatedUserCredential
+     *        impersonated user credentials
+     * @return a connection to the SQL Server opened using the given impersonated credential
+     * @throws PrivilegedActionException
+     *         in case of failure
+     */
+    private static Connection createConnection(
+            final GSSCredential impersonatedUserCredential) throws PrivilegedActionException {
+
+        return Subject.doAs(new Subject(), (PrivilegedExceptionAction<Connection>) () -> {
+            driverProperties.put("gsscredential", impersonatedUserCredential);
+            return DriverManager.getConnection(CONNECTION_URI, driverProperties);
+        });
+    }
+
+}
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/connections/ConnectURL.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/connections/ConnectURL.java b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/connections/ConnectURL.java
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/connections/ConnectURL.java	
@@ -0,0 +1,46 @@
+/*=====================================================================
+File: 	 ConnectURL.java
+Summary: This Microsoft JDBC Driver for SQL Server sample application
+         demonstrates how to connect to a SQL Server database by using 
+		 a connection URL. It also demonstrates how to retrieve data 
+		 from a SQL Server database by using an SQL statement.
+---------------------------------------------------------------------
+This file is part of the Microsoft JDBC Driver for SQL Server Code Samples.
+Copyright (C) Microsoft Corporation.  All rights reserved.
+ 
+This source code is intended only as a supplement to Microsoft
+Development Tools and/or on-line documentation.  See these other
+materials for detailed information regarding Microsoft code samples.
+ 
+THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF
+ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
+PARTICULAR PURPOSE.
+=====================================================================*/
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+public class ConnectURL {
+    public static void main(String[] args) {
+
+        // Create a variable for the connection string.
+        String connectionUrl = "jdbc:sqlserver://<server>:<port>;databaseName=AdventureWorks;user=<user>;password=<password>";
+
+        try (Connection con = DriverManager.getConnection(connectionUrl); Statement stmt = con.createStatement();) {
+            String SQL = "SELECT TOP 10 * FROM Person.Contact";
+            ResultSet rs = stmt.executeQuery(SQL);
+
+            // Iterate through the data in the result set and display it.
+            while (rs.next()) {
+                System.out.println(rs.getString("FirstName") + " " + rs.getString("LastName"));
+            }
+        }
+        // Handle any errors that may have occurred.
+        catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+}
\ No newline at end of file
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/connections/ConnectDataSource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/connections/ConnectDataSource.java b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/connections/ConnectDataSource.java
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/connections/ConnectDataSource.java	
@@ -0,0 +1,56 @@
+/*=====================================================================
+File: 	 ConnectDataSource.java
+Summary: This Microsoft JDBC Driver for SQL Server sample application
+         demonstrates how to connect to a SQL Server database by 
+	     using a data source object.
+---------------------------------------------------------------------
+This file is part of the Microsoft JDBC Driver for SQL Server Code Samples.
+Copyright (C) Microsoft Corporation.  All rights reserved.
+ 
+This source code is intended only as a supplement to Microsoft
+Development Tools and/or on-line documentation.  See these other
+materials for detailed information regarding Microsoft code samples.
+ 
+THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF
+ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
+PARTICULAR PURPOSE.
+=====================================================================*/
+import java.sql.CallableStatement;
+import java.sql.Connection;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;
+
+public class ConnectDataSource {
+
+    public static void main(String[] args) {
+
+        // Create datasource.
+        SQLServerDataSource ds = new SQLServerDataSource();
+        ds.setUser("<user>");
+        ds.setPassword("<password>");
+        ds.setServerName("<server>");
+        ds.setPortNumber(Integer.parseInt("<port>"));
+        ds.setDatabaseName("AdventureWorks");
+
+        try (Connection con = ds.getConnection();
+                CallableStatement cstmt = con.prepareCall("{call dbo.uspGetEmployeeManagers(?)}");) {
+            // Execute a stored procedure that returns some data.
+            cstmt.setInt(1, 50);
+            ResultSet rs = cstmt.executeQuery();
+
+            // Iterate through the data in the result set and display it.
+            while (rs.next()) {
+                System.out.println("EMPLOYEE: " + rs.getString("LastName") + ", " + rs.getString("FirstName"));
+                System.out.println("MANAGER: " + rs.getString("ManagerLastName") + ", " + rs.getString("ManagerFirstName"));
+                System.out.println();
+            }
+        }
+        // Handle any errors that may have occurred.
+        catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+}
\ No newline at end of file
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/resultsets/UpdateResultSet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/resultsets/UpdateResultSet.java b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/resultsets/UpdateResultSet.java
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/resultsets/UpdateResultSet.java	
@@ -0,0 +1,79 @@
+/*=====================================================================
+File: 	 UpdateResultSet.java
+Summary: This Microsoft JDBC Driver for SQL Server sample application
+         demonstrates how to use an updateable result set to insert,
+         update, and delete a row of data in a SQL Server database.
+----------------------------------------------------------------------
+This file is part of the Microsoft JDBC Driver for SQL Server Code Samples.
+Copyright (C) Microsoft Corporation.  All rights reserved.
+ 
+This source code is intended only as a supplement to Microsoft
+Development Tools and/or on-line documentation.  See these other
+materials for detailed information regarding Microsoft code samples.
+ 
+THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF
+ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
+PARTICULAR PURPOSE.
+=====================================================================*/
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+public class UpdateResultSet {
+
+    public static void main(String[] args) {
+
+        // Create a variable for the connection string.
+        String connectionUrl = "jdbc:sqlserver://<server>:<port>;databaseName=AdventureWorks;user=<user>;password=<password>";
+
+        try (Connection con = DriverManager.getConnection(connectionUrl);
+                Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);) {
+
+            // Create and execute an SQL statement, retrieving an updateable result set.
+            String SQL = "SELECT * FROM HumanResources.Department;";
+            ResultSet rs = stmt.executeQuery(SQL);
+
+            // Insert a row of data.
+            rs.moveToInsertRow();
+            rs.updateString("Name", "Accounting");
+            rs.updateString("GroupName", "Executive General and Administration");
+            rs.updateString("ModifiedDate", "08/01/2006");
+            rs.insertRow();
+
+            // Retrieve the inserted row of data and display it.
+            SQL = "SELECT * FROM HumanResources.Department WHERE Name = 'Accounting';";
+            rs = stmt.executeQuery(SQL);
+            displayRow("ADDED ROW", rs);
+
+            // Update the row of data.
+            rs.first();
+            rs.updateString("GroupName", "Finance");
+            rs.updateRow();
+
+            // Retrieve the updated row of data and display it.
+            rs = stmt.executeQuery(SQL);
+            displayRow("UPDATED ROW", rs);
+
+            // Delete the row of data.
+            rs.first();
+            rs.deleteRow();
+            System.out.println("ROW DELETED");
+        }
+        // Handle any errors that may have occurred.
+        catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private static void displayRow(String title,
+            ResultSet rs) throws SQLException {
+        System.out.println(title);
+        while (rs.next()) {
+            System.out.println(rs.getString("Name") + " : " + rs.getString("GroupName"));
+            System.out.println();
+        }
+    }
+}
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/resultsets/RetrieveResultSet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/resultsets/RetrieveResultSet.java b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/resultsets/RetrieveResultSet.java
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/resultsets/RetrieveResultSet.java	
@@ -0,0 +1,80 @@
+/*=====================================================================
+File: 	 RetrieveResultSet.java
+Summary: This Microsoft JDBC Driver for SQL Server sample application
+         demonstrates how to use a result set to retrieve a set of
+         data from a SQL Server database.
+---------------------------------------------------------------------
+This file is part of the Microsoft JDBC Driver for SQL Server Code Samples.
+Copyright (C) Microsoft Corporation.  All rights reserved.
+ 
+This source code is intended only as a supplement to Microsoft
+Development Tools and/or on-line documentation.  See these other
+materials for detailed information regarding Microsoft code samples.
+ 
+THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF
+ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
+PARTICULAR PURPOSE.
+=====================================================================*/
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+public class RetrieveResultSet {
+
+    public static void main(String[] args) {
+
+        // Create a variable for the connection string.
+        String connectionUrl = "jdbc:sqlserver://<server>:<port>;databaseName=AdventureWorks;user=<user>;password=<password>";
+
+        try (Connection con = DriverManager.getConnection(connectionUrl); Statement stmt = con.createStatement();) {
+            createTable(stmt);
+			String SQL = "SELECT * FROM Production.Product;";
+            ResultSet rs = stmt.executeQuery(SQL);
+            displayRow("PRODUCTS", rs);
+        }
+        // Handle any errors that may have occurred.
+        catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private static void displayRow(String title,
+            ResultSet rs) throws SQLException {
+        System.out.println(title);
+        while (rs.next()) {
+            System.out.println(rs.getString("ProductNumber") + " : " + rs.getString("Name"));
+        }
+    }
+
+    private static void createTable(Statement stmt) throws SQLException {
+        stmt.execute("if exists (select * from sys.objects where name = 'Product_JDBC_Sample')"
+                + "drop table Product_JDBC_Sample");
+
+        String sql = "CREATE TABLE [Product_JDBC_Sample](" + "[ProductID] [int] IDENTITY(1,1) NOT NULL,"
+                + "[Name] [varchar](30) NOT NULL," + "[ProductNumber] [nvarchar](25) NOT NULL,"
+                + "[MakeFlag] [bit] NOT NULL," + "[FinishedGoodsFlag] [bit] NOT NULL," + "[Color] [nvarchar](15) NULL,"
+                + "[SafetyStockLevel] [smallint] NOT NULL," + "[ReorderPoint] [smallint] NOT NULL,"
+                + "[StandardCost] [money] NOT NULL," + "[ListPrice] [money] NOT NULL," + "[Size] [nvarchar](5) NULL,"
+                + "[SizeUnitMeasureCode] [nchar](3) NULL," + "[WeightUnitMeasureCode] [nchar](3) NULL,"
+                + "[Weight] [decimal](8, 2) NULL," + "[DaysToManufacture] [int] NOT NULL,"
+                + "[ProductLine] [nchar](2) NULL," + "[Class] [nchar](2) NULL," + "[Style] [nchar](2) NULL,"
+                + "[ProductSubcategoryID] [int] NULL," + "[ProductModelID] [int] NULL,"
+                + "[SellStartDate] [datetime] NOT NULL," + "[SellEndDate] [datetime] NULL,"
+                + "[DiscontinuedDate] [datetime] NULL," + "[rowguid] [uniqueidentifier] ROWGUIDCOL  NOT NULL,"
+                + "[ModifiedDate] [datetime] NOT NULL,)";
+
+        stmt.execute(sql);
+
+        sql = "INSERT Product_JDBC_Sample VALUES ('Adjustable Time','AR-5381','0','0',NULL,'1000','750','0.00','0.00',NULL,NULL,NULL,NULL,'0',NULL,NULL,NULL,NULL,NULL,'2008-04-30 00:00:00.000',NULL,NULL,'694215B7-08F7-4C0D-ACB1-D734BA44C0C8','2014-02-08 10:01:36.827') ";
+        stmt.execute(sql);
+
+        sql = "INSERT Product_JDBC_Sample VALUES ('ML Bottom Bracket','BB-8107','0','0',NULL,'1000','750','0.00','0.00',NULL,NULL,NULL,NULL,'0',NULL,NULL,NULL,NULL,NULL,'2008-04-30 00:00:00.000',NULL,NULL,'694215B7-08F7-4C0D-ACB1-D734BA44C0C8','2014-02-08 10:01:36.827') ";
+        stmt.execute(sql);
+
+        sql = "INSERT Product_JDBC_Sample VALUES ('Mountain-500 Black, 44','BK-M18B-44','0','0',NULL,'1000','750','0.00','0.00',NULL,NULL,NULL,NULL,'0',NULL,NULL,NULL,NULL,NULL,'2008-04-30 00:00:00.000',NULL,NULL,'694215B7-08F7-4C0D-ACB1-D734BA44C0C8','2014-02-08 10:01:36.827') ";
+        stmt.execute(sql);
+    }
+}
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/resultsets/CacheResultSet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/resultsets/CacheResultSet.java b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/resultsets/CacheResultSet.java
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/resultsets/CacheResultSet.java	
@@ -0,0 +1,89 @@
+/*=====================================================================
+File: 	 CacheResultSet.java
+Summary: This Microsoft JDBC Driver for SQL Server sample application
+         demonstrates how to use a result set to retrieve a large set
+         of data from a SQL Server database. In addition, it
+         demonstrates how to control the amount of data that is fetched
+         from the database and cached on the client.
+---------------------------------------------------------------------
+This file is part of the Microsoft JDBC Driver for SQL Server Code Samples.
+Copyright (C) Microsoft Corporation.  All rights reserved.
+ 
+This source code is intended only as a supplement to Microsoft
+Development Tools and/or on-line documentation.  See these other
+materials for detailed information regarding Microsoft code samples.
+ 
+THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF
+ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
+PARTICULAR PURPOSE.
+=====================================================================*/
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.ArrayList;
+
+import com.microsoft.sqlserver.jdbc.SQLServerResultSet;
+
+public class CacheResultSet {
+
+    @SuppressWarnings("serial")
+	public static void main(String[] args) {
+
+        // Create a variable for the connection string.
+        String connectionUrl = "jdbc:sqlserver://<server>:<port>;databaseName=AdventureWorks;user=<user>;password=<password>";
+
+        try (Connection con = DriverManager.getConnection(connectionUrl);
+                Statement stmt = con.createStatement(SQLServerResultSet.TYPE_SS_SERVER_CURSOR_FORWARD_ONLY, SQLServerResultSet.CONCUR_READ_ONLY);) {
+
+            String SQL = "SELECT * FROM Sales.SalesOrderDetail;";
+
+            for (int n : new ArrayList<Integer>() {
+                {
+                    add(1);
+                    add(10);
+                    add(100);
+                    add(1000);
+                    add(0);
+                }
+            }) {
+                // Perform a fetch for every nth row in the result set.
+                try (ResultSet rs = stmt.executeQuery(SQL)) {
+                    timerTest(n, rs);
+                }
+            }
+        }
+        // Handle any errors that may have occurred.
+        catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private static void timerTest(int fetchSize,
+            ResultSet rs) throws SQLException {
+
+        // Declare the variables for tracking the row count and elapsed time.
+        int rowCount = 0;
+        long startTime = 0;
+        long stopTime = 0;
+        long runTime = 0;
+
+        // Set the fetch size then iterate through the result set to
+        // cache the data locally.
+        rs.setFetchSize(fetchSize);
+        startTime = System.currentTimeMillis();
+        while (rs.next()) {
+            rowCount++;
+        }
+        stopTime = System.currentTimeMillis();
+        runTime = stopTime - startTime;
+
+        // Display the results of the timer test.
+        System.out.println("FETCH SIZE: " + rs.getFetchSize());
+        System.out.println("ROWS PROCESSED: " + rowCount);
+        System.out.println("TIME TO EXECUTE: " + runTime);
+        System.out.println();
+    }
+}
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/datatypes/SqlXmlDataType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/datatypes/SqlXmlDataType.java b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/datatypes/SqlXmlDataType.java
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/datatypes/SqlXmlDataType.java	
@@ -0,0 +1,258 @@
+/*=====================================================================
+File: 	 SqlXmlDataType.java
+Summary: This Microsoft JDBC Driver for SQL Server sample application
+         demonstrates how to store XML data in a relational database, 
+         how to retrieve XML data from a database, and 
+         how to parse XML data with the SQLXML Java data type.
+---------------------------------------------------------------------
+This file is part of the Microsoft JDBC Driver for SQL Server Code Samples.
+Copyright (C) Microsoft Corporation.  All rights reserved.
+ 
+This source code is intended only as a supplement to Microsoft
+Development Tools and/or on-line documentation.  See these other
+materials for detailed information regarding Microsoft code samples.
+ 
+THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF
+ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
+PARTICULAR PURPOSE.
+=====================================================================*/
+import java.io.IOException;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.SQLXML;
+import java.sql.Statement;
+
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.sax.SAXResult;
+import javax.xml.transform.sax.SAXSource;
+import javax.xml.transform.sax.SAXTransformerFactory;
+
+import org.xml.sax.Attributes;
+import org.xml.sax.ContentHandler;
+import org.xml.sax.Locator;
+import org.xml.sax.SAXException;
+import org.xml.sax.XMLReader;
+
+
+public class SqlXmlDataType {
+
+    public static void main(String[] args) {
+
+		// Create a variable for the connection string.
+		String connectionUrl = "jdbc:sqlserver://<server>:<port>;databaseName=<database>;username=<user>;password=<password>;";
+
+		// Establish the connection.
+		try (Connection con = DriverManager.getConnection(connectionUrl);
+				Statement stmt = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE)) {
+
+			// Create initial sample data.
+			createSampleTables(stmt);
+
+			// The showGetters method demonstrates how to parse the data in the
+			// SQLXML object by using the SAX, ContentHandler and XMLReader.
+			showGetters(stmt);
+
+			// The showSetters method demonstrates how to set the xml column
+			// by using the SAX, ContentHandler, and ResultSet.
+			showSetters(con, stmt);
+
+			// The showTransformer method demonstrates how to get an XML data
+			// from one table and insert that XML data to another table
+			// by using the SAX and the Transformer.
+			showTransformer(con, stmt);
+		}
+        // Handle any errors that may have occurred.
+        catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    private static void showGetters(Statement stmt) throws IOException, SAXException, SQLException {
+
+        // Create an instance of the custom content handler.
+        ExampleContentHandler myHandler = new ExampleContentHandler();
+
+        // Create and execute an SQL statement that returns a
+        // set of data.
+        String SQL = "SELECT * FROM TestTable1";
+
+        try (ResultSet rs = stmt.executeQuery(SQL)) {
+
+            rs.next();
+
+            SQLXML xmlSource = rs.getSQLXML("Col3");
+
+            // Send SAX events to the custom content handler.
+            SAXSource sxSource = xmlSource.getSource(SAXSource.class);
+            XMLReader xmlReader = sxSource.getXMLReader();
+            xmlReader.setContentHandler(myHandler);
+
+            System.out.println("showGetters method: Parse an XML data in TestTable1 => ");
+            xmlReader.parse(sxSource.getInputSource());
+        }
+    }
+
+    private static void showSetters(Connection con, Statement stmt) {
+
+        // Create and execute an SQL statement, retrieving an updatable result set.
+        String SQL = "SELECT * FROM TestTable1;";
+        try (ResultSet rs = stmt.executeQuery(SQL)) {
+
+            // Create an empty SQLXML object.
+            SQLXML sqlxml = con.createSQLXML();
+
+            // Set the result value from SAX events.
+            SAXResult sxResult = sqlxml.setResult(SAXResult.class);
+            ContentHandler myHandler = sxResult.getHandler();
+
+            // Set the XML elements and attributes into the result.
+            myHandler.startDocument();
+            myHandler.startElement(null, "contact", "contact", null);
+            myHandler.startElement(null, "name", "name", null);
+            myHandler.endElement(null, "name", "name");
+            myHandler.startElement(null, "phone", "phone", null);
+            myHandler.endElement(null, "phone", "phone");
+            myHandler.endElement(null, "contact", "contact");
+            myHandler.endDocument();
+
+            // Update the data in the result set.
+            rs.moveToInsertRow();
+            rs.updateString("Col2", "C");
+            rs.updateSQLXML("Col3", sqlxml);
+            rs.insertRow();
+
+            // Display the data.
+            System.out.println("showSetters method: Display data in TestTable1 => ");
+            while (rs.next()) {
+                System.out.println(rs.getString("Col1") + " : " + rs.getString("Col2"));
+                SQLXML xml = rs.getSQLXML("Col3");
+                System.out.println("XML column : " + xml.getString());
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    private static void showTransformer(Connection con, Statement stmt) throws Exception {
+
+        // Create and execute an SQL statement that returns a
+        // set of data.
+        String SQL = "SELECT * FROM TestTable1";
+        try (ResultSet rs = stmt.executeQuery(SQL)) {
+
+            rs.next();
+
+            // Get the value of the source SQLXML object from the database.
+            SQLXML xmlSource = rs.getSQLXML("Col3");
+
+            // Get a Source to read the XML data.
+            SAXSource sxSource = xmlSource.getSource(SAXSource.class);
+
+            // Create a destination SQLXML object without any data.
+            SQLXML xmlDest = con.createSQLXML();
+
+            // Get a Result to write the XML data.
+            SAXResult sxResult = xmlDest.setResult(SAXResult.class);
+
+            // Transform the Source to a Result by using the identity transform.
+            SAXTransformerFactory stf = (SAXTransformerFactory) TransformerFactory.newInstance();
+            Transformer identity = stf.newTransformer();
+            identity.transform(sxSource, sxResult);
+            // Insert the destination SQLXML object into the database.
+            try (PreparedStatement psmt = con
+                    .prepareStatement("INSERT INTO TestTable2" + " (Col2, Col3, Col4, Col5) VALUES (?, ?, ?, ?)")) {
+                psmt.setString(1, "A");
+                psmt.setString(2, "Test data");
+                psmt.setInt(3, 123);
+                psmt.setSQLXML(4, xmlDest);
+                psmt.execute();
+            }
+        }
+        // Execute the query and display the data.
+        SQL = "SELECT * FROM TestTable2";
+        try (ResultSet rs = stmt.executeQuery(SQL)) {
+
+            System.out.println("showTransformer method : Display data in TestTable2 => ");
+            while (rs.next()) {
+                System.out.println(rs.getString("Col1") + " : " + rs.getString("Col2"));
+                System.out.println(rs.getString("Col3") + " : " + rs.getInt("Col4"));
+
+                SQLXML xml = rs.getSQLXML("Col5");
+                System.out.println("XML column : " + xml.getString());
+            }
+        }
+    }
+
+    private static void createSampleTables(Statement stmt) throws SQLException {
+        // Drop the tables.
+        stmt.executeUpdate("if exists (select * from sys.objects where name = 'TestTable1')" + "drop table TestTable1");
+
+        stmt.executeUpdate("if exists (select * from sys.objects where name = 'TestTable2')" + "drop table TestTable2");
+
+        // Create empty tables.
+        stmt.execute("CREATE TABLE TestTable1 (Col1 int IDENTITY, Col2 char, Col3 xml)");
+        stmt.execute("CREATE TABLE TestTable2 (Col1 int IDENTITY, Col2 char, Col3 varchar(50), Col4 int, Col5 xml)");
+
+        // Insert two rows to the TestTable1.
+        String row1 = "<contact><name>Contact Name 1</name><phone>XXX-XXX-XXXX</phone></contact>";
+        String row2 = "<contact><name>Contact Name 2</name><phone>YYY-YYY-YYYY</phone></contact>";
+
+        stmt.executeUpdate("insert into TestTable1" + " (Col2, Col3) values('A', '" + row1 + "')");
+        stmt.executeUpdate("insert into TestTable1" + " (Col2, Col3) values('B', '" + row2 + "')");
+    }
+}
+
+/**
+ * Handles output for XML elements for the test.
+ */
+class ExampleContentHandler implements ContentHandler {
+
+    public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException {
+        System.out.println("startElement method: localName => " + localName);
+    }
+
+    public void characters(char[] text, int start, int length) throws SAXException {
+        System.out.println("characters method");
+    }
+
+    public void endElement(String namespaceURI, String localName, String qName) throws SAXException {
+        System.out.println("endElement method: localName => " + localName);
+    }
+
+    public void setDocumentLocator(Locator locator) {
+        System.out.println("setDocumentLocator method");
+    }
+
+    public void startDocument() throws SAXException {
+        System.out.println("startDocument method");
+    }
+
+    public void endDocument() throws SAXException {
+        System.out.println("endDocument method");
+    }
+
+    public void startPrefixMapping(String prefix, String uri) throws SAXException {
+        System.out.println("startPrefixMapping method: prefix => " + prefix);
+    }
+
+    public void endPrefixMapping(String prefix) throws SAXException {
+        System.out.println("endPrefixMapping method: prefix => " + prefix);
+    }
+
+    public void skippedEntity(String name) throws SAXException {
+        System.out.println("skippedEntity method: name => " + name);
+    }
+
+    public void ignorableWhitespace(char[] text, int start, int length) throws SAXException {
+        System.out.println("ignorableWhiteSpace method");
+    }
+
+    public void processingInstruction(String target, String data) throws SAXException {
+        System.out.println("processingInstruction method: target => " + target);
+    }
+}
Index: sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/datatypes/SpatialDataTypes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/datatypes/SpatialDataTypes.java b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/datatypes/SpatialDataTypes.java
new file mode 100644
--- /dev/null	
+++ b/sqljdbc_12.2.0.0_enu/sqljdbc_12.2/enu/samples/datatypes/SpatialDataTypes.java	
@@ -0,0 +1,75 @@
+/*=====================================================================
+File: 	 SpatialDataTypes.java
+Summary: This Microsoft JDBC Driver for SQL Server Sample application
+         demonstrates how to use prepared statement setter methods to
+		 set values for SQL Server Spatial Datatypes 'Geography' and 'Geometry'.
+		 It also demonstrates how to use result set getter methods to read
+		 and parse SQL Server Spatial data type values.
+---------------------------------------------------------------------
+This file is part of the Microsoft JDBC Driver for SQL Server Code Samples.
+Copyright (C) Microsoft Corporation.  All rights reserved.
+ 
+This source code is intended only as a supplement to Microsoft
+Development Tools and/or on-line documentation.  See these other
+materials for detailed information regarding Microsoft code samples.
+ 
+THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF
+ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
+PARTICULAR PURPOSE.
+=====================================================================*/
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.SQLException;
+import java.sql.Statement;
+import com.microsoft.sqlserver.jdbc.Geography;
+import com.microsoft.sqlserver.jdbc.Geometry;
+import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;
+import com.microsoft.sqlserver.jdbc.SQLServerResultSet;
+
+
+public class SpatialDataTypes {
+
+	private static String tableName = "SpatialDataTypesTable_JDBC_Sample";
+
+	public static void main(String[] args) {
+
+		// Create a variable for the connection string.
+		String connectionUrl = "jdbc:sqlserver://<server>:<port>;databaseName=<database>;user=<user>;password=<password>";
+		// Establish the connection.
+		try (Connection con = DriverManager.getConnection(connectionUrl);
+				Statement stmt = con.createStatement();) {
+			dropAndCreateTable(stmt);
+
+			// TODO: Implement Sample code
+			String geoWKT = "POINT(3 40 5 6)";
+			Geometry geomWKT = Geometry.STGeomFromText(geoWKT, 0);
+			Geography geogWKT = Geography.STGeomFromText(geoWKT, 4326);
+
+			try (SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) con
+					.prepareStatement(
+							"insert into " + tableName + " values (?, ?)");) {
+				pstmt.setGeometry(1, geomWKT);
+				pstmt.setGeography(2, geogWKT);
+				pstmt.execute();
+
+				SQLServerResultSet rs = (SQLServerResultSet) stmt
+						.executeQuery("select * from " + tableName);
+				rs.next();
+
+				System.out.println("Geometry data: " + rs.getGeometry(1));
+				System.out.println("Geography data: " + rs.getGeography(2));
+			}
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+	}
+
+	private static void dropAndCreateTable(Statement stmt) throws SQLException {
+		stmt.executeUpdate("if object_id('" + tableName + "','U') is not null"
+				+ " drop table " + tableName);
+
+		stmt.executeUpdate(
+				"Create table " + tableName + " (c1 geometry, c2 geography)");
+	}
+}
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_02_06_2023_8_43_[Changes]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_02_06_2023_8_43_[Changes]1/shelved.patch
new file mode 100644
